/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.wolfking.jeesite.modules.sys.service;

import java.util.ArrayList;
import java.util.List;

import com.google.common.collect.Lists;
import com.wolfking.jeesite.common.config.redis.RedisConstant;
import com.wolfking.jeesite.common.service.LongIDTreeService;
import com.wolfking.jeesite.common.utils.RedisUtils;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.modules.sys.dao.OfficeDao;
import com.wolfking.jeesite.modules.sys.entity.Office;
import com.wolfking.jeesite.modules.sys.utils.UserUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * 机构Service
 * @author ThinkGem
 * @version 2014-05-16
 */
@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class OfficeService extends LongIDTreeService<OfficeDao, Office> {

	@Autowired
	private RedisUtils redisUtils;

	public List<Office> findAll(){
		return UserUtils.getOfficeList();
	}

	public List<Office> findList(Boolean isAll){
		if (isAll != null && isAll){
			return UserUtils.getOfficeAllList();
		}else{
			return UserUtils.getOfficeList();
		}
	}

	public List<Office> findList(Office office){
		if(office != null){
			office.setParentIds(office.getParentIds()+"%");
			return dao.findByParentIdsLike(office);
		}
		return  new ArrayList<Office>();
	}

	/**
	 * 按编码获得机构信息
	 * @param code
	 * @return
	 */
	public Office getByCode(String code){
		if(StringUtils.isBlank(code)){
			return null;
		}
		return dao.getByCode(code);
	}

	/**
	 * 按编码获得下属机构列表
	 * @param code
	 */
	public List<Office> getSubListByParentCode(String code){
		if(StringUtils.isBlank(code)){
			return Lists.newArrayList();
		}
		return dao.getSubListByParentCode(code);
	}

	@Transactional(readOnly = false)
	public void save(Office office) {
		super.save(office);
		redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_DB,RedisConstant.SYS_OFFICE_ALL_LIST);
//		UserUtils.removeCache(RedisConstant.RedisDBType.REDIS_SYS_DB,UserUtils.CACHE_OFFICE_LIST);
	}
	
	@Transactional(readOnly = false)
	public void delete(Office office) {
		super.delete(office);
		redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_DB,RedisConstant.SYS_OFFICE_ALL_LIST);
//		UserUtils.removeCache(RedisConstant.RedisDBType.REDIS_SYS_DB,UserUtils.CACHE_OFFICE_LIST);
	}
	
}
