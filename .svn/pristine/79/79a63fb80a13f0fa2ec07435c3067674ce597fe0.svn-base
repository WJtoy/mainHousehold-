package com.wolfking.jeesite.ms.b2bcenter.sd.service;

import com.google.common.collect.Lists;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.b2b.common.B2BProcessFlag;
import com.kkl.kklplus.entity.b2bcenter.md.B2BDataSourceEnum;
import com.kkl.kklplus.entity.b2bcenter.pb.MQB2BOrderStatusUpdateMessage;
import com.kkl.kklplus.entity.b2bcenter.sd.*;
import com.kkl.kklplus.entity.canbo.sd.CanboOrderCompleted;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.common.service.SequenceIdService;
import com.wolfking.jeesite.common.utils.GsonUtils;
import com.wolfking.jeesite.modules.md.entity.Engineer;
import com.wolfking.jeesite.modules.sd.entity.Order;
import com.wolfking.jeesite.modules.sd.entity.OrderCondition;
import com.wolfking.jeesite.modules.sd.entity.OrderItem;
import com.wolfking.jeesite.modules.sd.entity.TwoTuple;
import com.wolfking.jeesite.modules.sd.service.OrderCacheReadService;
import com.wolfking.jeesite.modules.sd.utils.OrderUtils;
import com.wolfking.jeesite.modules.sys.entity.User;
import com.wolfking.jeesite.modules.sys.utils.LogUtils;
import com.wolfking.jeesite.ms.b2bcenter.md.utils.B2BMDUtils;
import com.wolfking.jeesite.ms.b2bcenter.mq.sender.B2BOrderStatusUpdateMQSender;
import com.wolfking.jeesite.ms.b2bcenter.sd.entity.B2BOrderStatusUpdateFailureLog;
import com.wolfking.jeesite.ms.b2bcenter.sd.entity.B2BOrderStatusUpdateReqEntity;
import com.wolfking.jeesite.ms.b2bcenter.sd.utils.B2BOrderUtils;
import com.wolfking.jeesite.ms.canbo.sd.service.CanboOrderService;
import com.wolfking.jeesite.ms.common.config.MicroServicesProperties;
import com.wolfking.jeesite.ms.inse.sd.service.InseOrderService;
import com.wolfking.jeesite.ms.jd.sd.service.JdOrderService;
import com.wolfking.jeesite.ms.jdue.sd.service.JDUEOrderService;
import com.wolfking.jeesite.ms.joyoung.sd.service.JoyoungOrderService;
import com.wolfking.jeesite.ms.konka.sd.service.KonkaOrderService;
import com.wolfking.jeesite.ms.pdd.sd.service.PddOrderService;
import com.wolfking.jeesite.ms.suning.sd.service.SuningOrderService;
import com.wolfking.jeesite.ms.tmall.sd.service.TmallOrderService;
import com.wolfking.jeesite.ms.um.sd.service.UMOrderService;
import com.wolfking.jeesite.ms.xyyplus.sd.service.XYYPlusOrderService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

@Slf4j
@Transactional(propagation = Propagation.NOT_SUPPORTED)
@Service
public class B2BCenterOrderService {

    @Autowired
    private B2BOrderStatusUpdateMQSender b2BOrderStatusUpdateMQSender;
    @Autowired
    private OrderCacheReadService orderCacheReadService;

    @Autowired
    private CanboOrderService canboOrderService;

    @Autowired
    private TmallOrderService tmallOrderService;

    @Autowired
    private JdOrderService jdOrderService;

    @Autowired
    private InseOrderService inseOrderService;

    @Autowired
    private KonkaOrderService konkaOrderService;

    @Autowired
    private JoyoungOrderService joyoungOrderService;

    @Autowired
    private SuningOrderService suningOrderService;

    @Autowired
    private JDUEOrderService jdueOrderService;

    @Autowired
    private XYYPlusOrderService xyyPlusOrderService;

    @Autowired
    private UMOrderService umOrderService;

    @Autowired
    private PddOrderService pddOrderService;

    @Autowired
    private MicroServicesProperties microServicesProperties;

    public static final User KKL_SYSTEM_USER = new User(0L, "快可立全国联保", "4006663653");
    public static final long USER_ID_KKL_AUTO_GRADE = 2L; //用户回复短信

    //private static final SequenceIdUtils sequenceIdUtils = new SequenceIdUtils(ThreadLocalRandom.current().nextInt(32), ThreadLocalRandom.current().nextInt(32));
    @Autowired
    private SequenceIdService sequenceIdService;

    //-----------------------------------------------------------------------------------------------------------公用方法

    //region 公用方法

    /**
     * 是否需要发送工单状态消息给B2B微服务
     */
    private boolean isNeedSendOrderStatusMsgToB2B(Integer dataSourceId) {
        return B2BOrderUtils.canInvokeB2BMicroService(dataSourceId);
    }

    /**
     * 记录发送B2B工单状态变更消息过程中失败的情况
     */
    private void saveFailureLog(B2BOrderStatusUpdateFailureLog failureLog, String methodName) {
        try {
            String logJson = GsonUtils.toGsonString(failureLog);
            LogUtils.saveLog("B2BCenterOrderService.saveFailureLog", methodName, logJson, null, null);
        } catch (Exception e) {
            log.error("B2BCenterOrderService.saveFailureLog", e);
        }
    }

    //endregion 公用方法

    //----------------------------------------------------------------------------------------------创建工单状态变更消息实体

    //region 创建工单状态变更消息实体

    private void setB2BOrderStatusUpdateReqEntityProperties(B2BOrderStatusUpdateReqEntity.Builder entityBuilder, B2BOrderStatusEnum status, B2BOrderActionEnum action,
                                                            Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long kklOrderId, String kklOrderNo,
                                                            User updater, Date updateDate) {
        if (entityBuilder != null) {
            entityBuilder
                    .setStatus(status)
                    .setActionType(action == null ? B2BOrderActionEnum.NONE : action)
                    .setDataSourceId(dataSourceId)
                    .setB2bOrderId(b2bOrderId == null ? 0L : b2bOrderId)
                    .setB2bOrderNo(b2bOrderNo)
                    .setOrderId(kklOrderId == null ? 0L : kklOrderId)
                    .setKklOrderNo(StringUtils.toString(kklOrderNo))
                    .setUpdaterId(updater == null || updater.getId() == null ? 0L : updater.getId())
                    .setUpdateDate(updateDate == null ? new Date() : updateDate);
        }

    }

    /**
     * B2B派单（APP接单、客户派单、网点派单）
     */
    public void planOrder(Order order, Engineer engineer, User updater, Date updateDate) {
        if (order != null && order.getId() != null) {
            if (order.getOrderCondition() != null && order.getOrderCondition().getCustomerId() > 0) {
                updateOrderStatus(B2BDataSourceEnum.UM, order.getOrderCondition().getCustomerId(), order.getId(), B2BOrderStatusEnum.PLANNED);
            } else {
                Order cachedOrder = orderCacheReadService.getOrderById(order.getId(), order.getQuarter(), OrderUtils.OrderDataLevel.CONDITION, true, false);
                if (cachedOrder != null) {
                    updateOrderStatus(B2BDataSourceEnum.UM, cachedOrder.getOrderCondition().getCustomerId(), cachedOrder.getId(), B2BOrderStatusEnum.PLANNED);
                }
            }
        }
        if (order != null && order.getDataSource() != null && engineer != null) {
            planB2BOrder(order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(),
                    engineer.getId(), engineer.getName(), engineer.getContactInfo(), updater, updateDate);
        }
    }

    private void planB2BOrder(Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long orderId, String orderNo,
                              Long engineerId, String engineerName, String engineerMobile, User updater, Date updateDate) {
        if (isNeedSendOrderStatusMsgToB2B(dataSourceId) && StringUtils.isNotBlank(b2bOrderNo)) {
            TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
            if (B2BDataSourceEnum.isTooneDataSourceId(dataSourceId)) {
                result = canboOrderService.createPlanRequestEntity(engineerName, engineerMobile);
//                if (dataSourceId != B2BDataSourceEnum.USATON.id && dataSourceId != B2BDataSourceEnum.CANBO.id) {//阿斯丹顿和康宝传真实的电话
//                    if (StringUtils.isNotBlank(microServicesProperties.getCanbo().getDefaultPhoneNumber())) {
//                        result.getBElement().setEngineerMobile(microServicesProperties.getCanbo().getDefaultPhoneNumber());
//                    }
//                }
            } else if (dataSourceId == B2BDataSourceEnum.INSE.id) {
                result = inseOrderService.createPlanRequestEntity(engineerId, engineerName, engineerMobile);
                if (StringUtils.isNotBlank(microServicesProperties.getInse().getDefaultPhoneNumber())) {
                    result.getBElement().setEngineerMobile(microServicesProperties.getInse().getDefaultPhoneNumber());
                }
            } else if (dataSourceId == B2BDataSourceEnum.KONKA.id) {
                result = konkaOrderService.createPlanRequestEntity(engineerName, engineerMobile, "");
                if (StringUtils.isNotBlank(microServicesProperties.getKonka().getDefaultPhoneNumber())) {
                    result.getBElement().setEngineerMobile(microServicesProperties.getKonka().getDefaultPhoneNumber());
                }
            } else if (dataSourceId == B2BDataSourceEnum.JOYOUNG.id) {
                result = joyoungOrderService.createPlanRequestEntity(engineerName, engineerMobile);
                if (StringUtils.isNotBlank(microServicesProperties.getJoyoung().getDefaultPhoneNumber())) {
                    result.getBElement().setEngineerMobile(microServicesProperties.getJoyoung().getDefaultPhoneNumber());
                }
            } else if (dataSourceId == B2BDataSourceEnum.SUNING.id) {
                result = suningOrderService.createSuningPlanRequestEntity(engineerId, engineerName, engineerMobile);
            } else if (dataSourceId == B2BDataSourceEnum.JDUE.id) {
                result = jdueOrderService.createPlanRequestEntity(engineerName, engineerMobile);
                if (StringUtils.isNotBlank(microServicesProperties.getJdue().getDefaultPhoneNumber())) {
                    result.getBElement().setEngineerMobile(microServicesProperties.getJdue().getDefaultPhoneNumber());
                }
            } else if (dataSourceId == B2BDataSourceEnum.XYINGYAN.id) {
                result = xyyPlusOrderService.createPlanRequestEntity(engineerName, engineerMobile);
                if (StringUtils.isNotBlank(microServicesProperties.getXyyPlus().getDefaultPhoneNumber())) {
                    result.getBElement().setEngineerMobile(microServicesProperties.getXyyPlus().getDefaultPhoneNumber());
                }
            }  else if (dataSourceId == B2BDataSourceEnum.TMALL.id) {
                result = tmallOrderService.createPlanRequestEntity(engineerName, engineerMobile);
            } else if (dataSourceId == B2BDataSourceEnum.PDD.id){
                result = pddOrderService.createPlanRequestEntity(engineerId, engineerName, engineerMobile);
            } else {
                result = new TwoTuple<>(true, null);
            }
            if (result.getAElement() && result.getBElement() != null) {
                setB2BOrderStatusUpdateReqEntityProperties(result.getBElement(), B2BOrderStatusEnum.PLANNED, B2BOrderActionEnum.PLAN,
                        dataSourceId, b2bOrderId, b2bOrderNo, orderId, orderNo, updater, updateDate);
                sendB2BOrderStatusUpdateMessage(result.getBElement().build());
            } else {
                if (!result.getAElement()) {
                    B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(dataSourceId, b2bOrderNo, engineerId, engineerName, engineerMobile, updater, updateDate, B2BOrderStatusEnum.PLANNED);
                    saveFailureLog(log, "planB2BOrder");
                }
            }
        }
    }

    /**
     * B2B预约
     */
    public void pendingOrder(Order order, Long servicePointId, Long engineerId, Integer pendingType, Date appointmentDate, User updater, Date updateDate) {
        if (order != null && order.getId() != null && order.getOrderCondition() != null && order.getOrderCondition().getCustomerId() > 0) {
            updateOrderStatus(B2BDataSourceEnum.UM, order.getOrderCondition().getCustomerId(), order.getId(), B2BOrderStatusEnum.APPOINTED);
        }
        if (order != null && order.getDataSource() != null) {
            appointB2BOrder(order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(),
                    servicePointId, engineerId, pendingType, appointmentDate, "", updater, updateDate);
        }
    }

    private void appointB2BOrder(Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long orderId, String orderNo,
                                 Long servicePointId, Long engineerId, Integer pendingType, Date effectiveDate, String remarks, User updater, Date updateDate) {
        if (isNeedSendOrderStatusMsgToB2B(dataSourceId) && StringUtils.isNotBlank(b2bOrderNo)) {
            TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
            if (B2BDataSourceEnum.isTooneDataSourceId(dataSourceId)) {
                result = canboOrderService.createAppointRequestEntity(effectiveDate, remarks, updater);
            } else if (dataSourceId == B2BDataSourceEnum.TMALL.id) {
                result = tmallOrderService.createTmallAppointRequestEntity(effectiveDate, updater, servicePointId, engineerId);
            } else if (dataSourceId == B2BDataSourceEnum.JD.id) {
                result = jdOrderService.createJdPlanAndAppointRequestEntity(pendingType, effectiveDate, servicePointId, engineerId);
            } else if (dataSourceId == B2BDataSourceEnum.INSE.id) {
                result = inseOrderService.createAppointRequestEntity(effectiveDate);
            } else if (dataSourceId == B2BDataSourceEnum.KONKA.id) {
                result = konkaOrderService.createAppointRequestEntity(effectiveDate, updater, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.JOYOUNG.id) {
                result = joyoungOrderService.createAppointRequestEntity(pendingType, effectiveDate, updater, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.SUNING.id) {
                result = suningOrderService.createSuningAppointRequestEntity(effectiveDate, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.JDUE.id) {
                result = jdueOrderService.createAppointRequestEntity(effectiveDate, remarks, updater);
            } else if (dataSourceId == B2BDataSourceEnum.XYINGYAN.id) {
                result = xyyPlusOrderService.createAppointRequestEntity(effectiveDate, servicePointId, engineerId);
            } else if (dataSourceId == B2BDataSourceEnum.PDD.id){
                result = pddOrderService.createAppointRequestEntity(effectiveDate, remarks);
            } else {
                result = new TwoTuple<>(true, null);
            }
            if (result.getAElement() && result.getBElement() != null) {
                setB2BOrderStatusUpdateReqEntityProperties(result.getBElement(), B2BOrderStatusEnum.APPOINTED, B2BOrderActionEnum.APPOINT,
                        dataSourceId, b2bOrderId, b2bOrderNo, orderId, orderNo, updater, updateDate);
                sendB2BOrderStatusUpdateMessage(result.getBElement().build());
            } else {
                if (!result.getAElement()) {
                    B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(dataSourceId, b2bOrderNo, updater, servicePointId, engineerId, updateDate, effectiveDate, remarks, B2BOrderStatusEnum.APPOINTED);
                    saveFailureLog(log, "appointB2BOrder");
                }
            }
        }
    }

    /**
     * B2B上门服务
     */
    public void serviceOrder(Order order, Long servicePointId, Long engineerId, User updater, Date updateDate) {
        if (order != null && order.getId() != null && order.getOrderCondition() != null && order.getOrderCondition().getCustomerId() > 0) {
            updateOrderStatus(B2BDataSourceEnum.UM, order.getOrderCondition().getCustomerId(), order.getId(), B2BOrderStatusEnum.SERVICED);
        }
        if (order != null && order.getDataSource() != null) {
            serviceB2BOrder(order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(),
                    servicePointId, engineerId, updater, updateDate, "");
        }
    }

    private void serviceB2BOrder(Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long orderId, String orderNo,
                                 Long servicePointId, Long engineerId, User updater, Date updateDate, String remarks) {
        if (isNeedSendOrderStatusMsgToB2B(dataSourceId) && StringUtils.isNotBlank(b2bOrderNo)) {
            TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
            if (dataSourceId == B2BDataSourceEnum.KONKA.id) {
                result = konkaOrderService.createServiceRequestEntity(updateDate, servicePointId, engineerId, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.JOYOUNG.id) {
                result = joyoungOrderService.createServiceRequestEntity(updateDate, servicePointId, engineerId, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.TMALL.id) {
                result = tmallOrderService.createServiceRequestEntity();
            } else if (dataSourceId == B2BDataSourceEnum.PDD.id){
                result = pddOrderService.createServiceRequestEntity(updateDate, servicePointId, engineerId, remarks);
            } else {
                result = new TwoTuple<>(true, null);
            }
            if (result.getAElement() && result.getBElement() != null) {
                setB2BOrderStatusUpdateReqEntityProperties(result.getBElement(), B2BOrderStatusEnum.SERVICED, B2BOrderActionEnum.SERVICE,
                        dataSourceId, b2bOrderId, b2bOrderNo, orderId, orderNo, updater, updateDate);
                sendB2BOrderStatusUpdateMessage(result.getBElement().build());
            } else {
                if (!result.getAElement()) {
                    B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(dataSourceId, b2bOrderNo, servicePointId, engineerId, updater, updateDate, B2BOrderStatusEnum.SERVICED);
                    saveFailureLog(log, "serviceB2BOrder");
                }
            }
        }
    }

    public void retryCompletedOrder(List<Long> orderIds) {
        for (Long id : orderIds) {
            Order order = orderCacheReadService.getOrderById(id, null, OrderUtils.OrderDataLevel.CONDITION, true, false);
            if (order.getOrderCondition().getStatus().getIntValue().equals(Order.ORDER_STATUS_COMPLETED) ||
                    order.getOrderCondition().getStatus().getIntValue().equals(Order.ORDER_STATUS_CHARGED)) {
                User updater = new User(1L, KKL_SYSTEM_USER.getName(), KKL_SYSTEM_USER.getMobile());
                completeOrder(order, order.getOrderCondition().getCloseDate(), updater, order.getOrderCondition().getCloseDate());
            }
        }
    }

    /**
     * B2B完成工单
     */
    @Transactional()
    public void completeOrder(Order order, Date completedDate, User updater, Date updateDate) {
        if (order != null && order.getId() != null) {
            if (order.getOrderCondition() != null && order.getOrderCondition().getCustomerId() > 0) {
                updateOrderStatus(B2BDataSourceEnum.UM, order.getOrderCondition().getCustomerId(), order.getId(), B2BOrderStatusEnum.COMPLETED, completedDate);
            } else {
                Order cachedOrder = orderCacheReadService.getOrderById(order.getId(), order.getQuarter(), OrderUtils.OrderDataLevel.CONDITION, true, false);
                if (cachedOrder != null) {
                    updateOrderStatus(B2BDataSourceEnum.UM, cachedOrder.getOrderCondition().getCustomerId(), cachedOrder.getId(), B2BOrderStatusEnum.COMPLETED, completedDate);
                }
            }
        }
        if (order != null && order.getDataSource() != null) {
            Double orderCharge = order.getOrderFee() != null && order.getOrderFee().getOrderCharge() != null ? order.getOrderFee().getOrderCharge() : 0;
            completeB2BOrder(order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(), order.getQuarter(), order.getItems(), orderCharge,
                    completedDate, updater, updateDate, "");
        }
    }

    private void completeB2BOrder(Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long orderId, String orderNo, String quarter, List<OrderItem> orderItems, double orderCharge,
                                  Date effectiveDate, User updater, Date updateDate, String remarks) {
        if (isNeedSendOrderStatusMsgToB2B(dataSourceId) && StringUtils.isNotBlank(b2bOrderNo)) {
            TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
            if (B2BDataSourceEnum.isTooneDataSourceId(dataSourceId)) {
                result = canboOrderService.createCompleteRequestEntity(orderId, quarter, orderItems);
            } else if (dataSourceId == B2BDataSourceEnum.TMALL.id) {
//                result = tmallOrderService.createTmallCompleteRequestEntity(effectiveDate, updater);
                result = tmallOrderService.createTmallCompleteRequestEntityNew(orderId, quarter, orderItems, effectiveDate, updater);
            } else if (dataSourceId == B2BDataSourceEnum.JD.id) {
                result = jdOrderService.createJdCompleteRequestEntityNew(updater, orderId, quarter, orderItems);
            } else if (dataSourceId == B2BDataSourceEnum.INSE.id) {
                result = inseOrderService.createInseCompleteRequestEntity(orderId, quarter, orderItems);
            } else if (dataSourceId == B2BDataSourceEnum.KONKA.id) {
                result = konkaOrderService.createCompleteRequestEntity(orderId, quarter, orderItems, effectiveDate, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.JOYOUNG.id) {
                result = joyoungOrderService.createCompleteRequestEntity(orderId, quarter, orderItems, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.SUNING.id) {
                result = suningOrderService.createCompleteRequestEntity(orderId, quarter, effectiveDate);
            } else if (dataSourceId == B2BDataSourceEnum.JDUE.id) {
                result = jdueOrderService.createCompleteRequestEntity(orderId, quarter, orderItems);
            } else if (dataSourceId == B2BDataSourceEnum.XYINGYAN.id) {
                result = xyyPlusOrderService.createCompleteRequestEntity(orderId, quarter, orderItems, orderCharge);
            } else if (dataSourceId == B2BDataSourceEnum.PDD.id){
                result = pddOrderService.createCompleteRequestEntity(orderId, quarter, effectiveDate);
            } else {
                result = new TwoTuple<>(true, null);
            }
            if (result.getAElement() && result.getBElement() != null) {
                setB2BOrderStatusUpdateReqEntityProperties(result.getBElement(), B2BOrderStatusEnum.COMPLETED, B2BOrderActionEnum.COMPLETE,
                        dataSourceId, b2bOrderId, b2bOrderNo, orderId, orderNo, updater, updateDate);
                sendB2BOrderStatusUpdateMessage(result.getBElement().build());

            } else {
                if (!result.getAElement()) {
                    B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(orderId, quarter, orderItems, dataSourceId, b2bOrderNo, updater, updateDate, effectiveDate, remarks, B2BOrderStatusEnum.COMPLETED);
                    saveFailureLog(log, "completeB2BOrder");
                }
            }
        }
    }

    /**
     * 退单申请（工单退单申请时调用）
     */
    public void applyReturnOrder(Order order, Date applyDate, String remarks, User updater, Date updateDate) {
        if (order != null && order.getDataSource() != null) {
            Long servicePointId = order.getOrderCondition() != null && order.getOrderCondition().getServicePoint() != null && order.getOrderCondition().getServicePoint().getId() != null ? order.getOrderCondition().getServicePoint().getId() : 0;
            Long engineerId = order.getOrderCondition() != null && order.getOrderCondition().getEngineer() != null && order.getOrderCondition().getEngineer().getId() != null ? order.getOrderCondition().getEngineer().getId() : 0;
            applyForCancelB2BOrder(order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(),
                    applyDate, remarks, updater, updateDate, servicePointId, engineerId);
        }
    }

    private void applyForCancelB2BOrder(Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long orderId, String orderNo,
                                        Date effectiveDate, String remarks, User updater, Date updateDate, Long servicePointId, Long engineerId) {
        if (isNeedSendOrderStatusMsgToB2B(dataSourceId) && StringUtils.isNotBlank(b2bOrderNo)) {
            TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
            if (dataSourceId == B2BDataSourceEnum.TMALL.id) {
                result = tmallOrderService.createTmallAppointRequestEntity(effectiveDate, updater, servicePointId, engineerId);
            } else if (dataSourceId == B2BDataSourceEnum.JD.id) {
                result = jdOrderService.createJdOnlyAppointRequestEntity(effectiveDate);
            } else if (dataSourceId == B2BDataSourceEnum.XYINGYAN.id) {
                result = xyyPlusOrderService.createReturnOrderApplyRequestEntity(remarks);
            } else if (dataSourceId == B2BDataSourceEnum.INSE.id) {
                result = inseOrderService.createReturnOrderApplyRequestEntity(remarks);
            } else {
                result = new TwoTuple<>(true, null);
            }
            if (result.getAElement() && result.getBElement() != null) {
                setB2BOrderStatusUpdateReqEntityProperties(result.getBElement(), B2BOrderStatusEnum.APPLIED_FOR_CANCEL, B2BOrderActionEnum.CONVERTED_CANCEL,
                        dataSourceId, b2bOrderId, b2bOrderNo, orderId, orderNo, updater, updateDate);
                sendB2BOrderStatusUpdateMessage(result.getBElement().build());
            } else {
                if (!result.getAElement()) {
                    B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(dataSourceId, b2bOrderNo, updater, null, null, updateDate, effectiveDate, remarks, B2BOrderStatusEnum.APPOINTED);
                    saveFailureLog(log, "applyForCancelB2BOrder");
                }
            }
        }
    }

    public void retryReturnOrder(List<Long> orderIds) {
        for (Long id : orderIds) {
            Order order = orderCacheReadService.getOrderById(id, null, OrderUtils.OrderDataLevel.STATUS, true, false);
            if (order.getOrderCondition().getStatus().getIntValue().equals(Order.ORDER_STATUS_RETURNED)) {
                User updater = new User(KKL_SYSTEM_USER.getId(), KKL_SYSTEM_USER.getName(), KKL_SYSTEM_USER.getMobile());
                approveReturnOrder(order, order.getOrderStatus().getCancelResponsible().getIntValue(), order.getOrderCondition().getCloseDate(), "", updater, order.getOrderCondition().getCloseDate());
            }
        }
    }

    /**
     * 退单审核
     */
    public void approveReturnOrder(Order order, Integer kklCancelType, Date approveDate, String remarks, User updater, Date updateDate) {
        if (order != null && order.getId() != null && order.getOrderCondition() != null && order.getOrderCondition().getCustomerId() > 0) {
            updateOrderStatus(B2BDataSourceEnum.UM, order.getOrderCondition().getCustomerId(), order.getId(), B2BOrderStatusEnum.CANCELED, approveDate);
        }
        if (order != null && order.getDataSource() != null) {
            cancelB2BOrder(B2BOrderActionEnum.RETURN, order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(),
                    kklCancelType, approveDate, remarks, updater, updateDate);
        }
    }

//    public void returnB2BOrder(Integer dataSourceId, String b2bOrderNo, Long orderId, String orderNo, Integer kklCancelType, User updater, Date updateDate, Date effectiveDate, String remarks) {
//        cancelB2BOrder(B2BOrderActionEnum.RETURN, dataSourceId, b2bOrderNo, orderId, orderNo, kklCancelType, updater, updateDate, effectiveDate, remarks);
//    }

    public void retryCancelOrder(List<Long> orderIds) {
        for (Long id : orderIds) {
            Order order = orderCacheReadService.getOrderById(id, null, OrderUtils.OrderDataLevel.STATUS, true, false);
            if (order.getOrderCondition().getStatus().getIntValue().equals(Order.ORDER_STATUS_CANCELED)) {
                User updater = new User(KKL_SYSTEM_USER.getId(), KKL_SYSTEM_USER.getName(), KKL_SYSTEM_USER.getMobile());
                cancelOrder(order, order.getOrderStatus().getCancelResponsible().getIntValue(), order.getOrderCondition().getCloseDate(), "", updater, order.getOrderCondition().getCloseDate());
            }
        }
    }

    /**
     * 取消工单
     */
    public void cancelOrder(Order order, Integer kklCancelType, Date approveDate, String remarks, User updater, Date updateDate) {
        if (order != null && order.getId() != null && order.getOrderCondition() != null && order.getOrderCondition().getCustomerId() > 0) {
            updateOrderStatus(B2BDataSourceEnum.UM, order.getOrderCondition().getCustomerId(), order.getId(), B2BOrderStatusEnum.CANCELED, approveDate);
        }
        if (order != null && order.getDataSource() != null) {
            cancelB2BOrder(B2BOrderActionEnum.CONVERTED_CANCEL, order.getDataSourceId(), order.getB2bOrderId(), order.getWorkCardId(), order.getId(), order.getOrderNo(),
                    kklCancelType, approveDate, remarks, updater, updateDate);
        }
    }
//    public void cancelConvertedB2BOrder(Integer dataSourceId, String b2bOrderNo, Long orderId, String orderNo, Integer kklCancelType, User updater, Date updateDate, Date effectiveDate, String remarks) {
//        cancelB2BOrder(B2BOrderActionEnum.CONVERTED_CANCEL, dataSourceId, b2bOrderNo, orderId, orderNo, kklCancelType, updater, updateDate, effectiveDate, remarks);
//    }

    /**
     * B2B取消工单
     */
    private void cancelB2BOrder(B2BOrderActionEnum actionType, Integer dataSourceId, Long b2bOrderId, String b2bOrderNo, Long orderId, String orderNo,
                                Integer kklCancelType, Date effectiveDate, String remarks, User updater, Date updateDate) {
        if (isNeedSendOrderStatusMsgToB2B(dataSourceId) && StringUtils.isNotBlank(b2bOrderNo)) {
            TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
            if (B2BDataSourceEnum.isTooneDataSourceId(dataSourceId)) {
                result = canboOrderService.createTooneCancelRequestEntity(effectiveDate, updater, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.TMALL.id) {
                result = tmallOrderService.createTmallCancelRequestEntity(updater, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.JD.id) {
                result = jdOrderService.createJdCancelRequestEntity(kklCancelType, updater);
            } else if (dataSourceId == B2BDataSourceEnum.INSE.id) {
                result = inseOrderService.createInseCancelRequestEntity(kklCancelType, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.KONKA.id) {
                result = konkaOrderService.createCancelRequestEntity(kklCancelType, effectiveDate, updater);
            } else if (dataSourceId == B2BDataSourceEnum.JOYOUNG.id) {
                result = joyoungOrderService.createCancelRequestEntity(kklCancelType, remarks, effectiveDate, updater);
            } else if (dataSourceId == B2BDataSourceEnum.SUNING.id) {
                result = suningOrderService.createSuningCancelRequestEntity(kklCancelType);
            } else if (dataSourceId == B2BDataSourceEnum.JDUE.id) {
                result = jdueOrderService.createCancelRequestEntity(effectiveDate, updater, remarks);
            } else if (dataSourceId == B2BDataSourceEnum.PDD.id){
                result = pddOrderService.createCancelRequestEntity(kklCancelType);
            } else {
                result = new TwoTuple<>(true, null);
            }
            if (result.getAElement() && result.getBElement() != null) {
                setB2BOrderStatusUpdateReqEntityProperties(result.getBElement(), B2BOrderStatusEnum.CANCELED, actionType,
                        dataSourceId, b2bOrderId, b2bOrderNo, orderId, orderNo, updater, updateDate);
                sendB2BOrderStatusUpdateMessage(result.getBElement().build());
            } else {
                if (!result.getAElement()) {
                    B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(dataSourceId, b2bOrderNo, kklCancelType, updater, updateDate, effectiveDate, remarks, B2BOrderStatusEnum.CANCELED);
                    saveFailureLog(log, "cancelB2BOrder");
                }
            }
        }
    }

    public void retryChargeOrder(List<OrderCondition> conditions) {
        for (OrderCondition condition : conditions) {
            Date now = new Date();
            if (condition.getStatus().getIntValue().equals(Order.ORDER_STATUS_CHARGED)) {
                User updater = new User(KKL_SYSTEM_USER.getId(), KKL_SYSTEM_USER.getName(), KKL_SYSTEM_USER.getMobile());
                chargeB2BOrder(condition.getCustomerId(), condition.getOrderId(), condition.getQuarter(), updater.getId(), now.getTime());
            }
        }
    }

    /**
     * B2B工单对账操作
     */
    void chargeB2BOrder(Long customerId, Long kklOrderId, String kklQuarter, Long updaterId, Long updateAt) {
        TwoTuple<Boolean, B2BOrderStatusUpdateReqEntity.Builder> result;
        int dataSourceId = 0;
        if (B2BOrderUtils.canSendOrderDataToMS(customerId)) {
            dataSourceId = B2BDataSourceEnum.UM.id;
            result = umOrderService.createChargeRequestEntity(kklOrderId, kklQuarter, updateAt);
        } else {
            result = new TwoTuple<>(true, null);
        }
        if (result.getAElement() && result.getBElement() != null) {
            result.getBElement()
                    .setStatus(B2BOrderStatusEnum.CHARGED)
                    .setActionType(B2BOrderActionEnum.CHARGE)
                    .setDataSourceId(dataSourceId)
                    .setOrderId(kklOrderId)
                    .setChargeAt(updateAt)
                    .setUpdaterId(updaterId)
                    .setUpdateDate(new Date(updateAt));
            sendB2BOrderStatusUpdateMessage(result.getBElement().build());
        } else {
            if (!result.getAElement()) {
                B2BOrderStatusUpdateFailureLog log = new B2BOrderStatusUpdateFailureLog(dataSourceId, kklOrderId, new User(updaterId), new Date(updateAt), B2BOrderStatusEnum.CHARGED);
                saveFailureLog(log, "chargeB2BOrder");
            }
        }
    }

    //endregion 创建工单状态变更消息实体

    //------------------------------------------------------------------------------------------往队列发送消息、处理队列消息

    //region 向队列发送消息、处理消息

    /**
     * 发送B2B工单的状态变更消息
     */
    private void sendB2BOrderStatusUpdateMessage(B2BOrderStatusUpdateReqEntity reqEntity) {
        MQB2BOrderStatusUpdateMessage.B2BOrderStatusUpdateMessage.Builder builder = MQB2BOrderStatusUpdateMessage.B2BOrderStatusUpdateMessage.newBuilder();
        builder.setDataSource(reqEntity.getDataSourceId())
                .setOrderId(reqEntity.getOrderId())
                .setKklOrderNO(reqEntity.getKklOrderNo())
                .setB2BOrderId(reqEntity.getB2bOrderId())
                .setB2BOrderNo(reqEntity.getB2bOrderNo())
                .setStatus(reqEntity.getStatus().value)
                .setUpdaterId(reqEntity.getUpdaterId())
                .setUpdaterMobile(reqEntity.getUpdaterMobile())
                .setUpdaterName(reqEntity.getUpdaterName())
                .setEngineerId(StringUtils.toString(reqEntity.getEngineerId()))
                .setEngineerName(reqEntity.getEngineerName())
                .setEngineerMobile(reqEntity.getEngineerMobile())
                .setUpdateDt(reqEntity.getUpdateDate().getTime())
                .setEffectiveDt(reqEntity.getEffectiveDate() != null ? reqEntity.getEffectiveDate().getTime() : 0)
                .setRemarks(reqEntity.getRemarks())
                .setAppointmentStatus(reqEntity.getAppointmentStatus())
                .setInstallStatus(reqEntity.getInstallStaus())
                .setServicePointId(reqEntity.getServicePointId() == null ? 0 : reqEntity.getServicePointId())
                .setMessageId(sequenceIdService.nextId())
                .setActionType(reqEntity.getActionType().value)
                .setOrderCharge(reqEntity.getOrderCharge() == null ? 0.0 : reqEntity.getOrderCharge())
                .setKklPendingType(StringUtils.toString(reqEntity.getPendingType()))
                .setActualTotalSurcharge(reqEntity.getActualTotalSurcharge() == null ? 0.0 : reqEntity.getActualTotalSurcharge())
                .setCustomerTotalCharge(reqEntity.getCustomerTotalCharge() == null ? 0.0 : reqEntity.getCustomerTotalCharge())
                .setChargeAt(reqEntity.getChargeAt() == null ? 0 : reqEntity.getChargeAt());
        if (reqEntity.getOrderCompletedItems() != null && !reqEntity.getOrderCompletedItems().isEmpty()) {
            MQB2BOrderStatusUpdateMessage.CompletedItem.Builder completedItemBuilder;
            MQB2BOrderStatusUpdateMessage.B2BSurchargeItem surchargeItem;
            for (B2BOrderCompletedItem item : reqEntity.getOrderCompletedItems()) {
                completedItemBuilder = MQB2BOrderStatusUpdateMessage.CompletedItem.newBuilder()
                        .setItemCode(StringUtils.toString(item.getB2bProductCode()))
                        .setPic1(StringUtils.toString(item.getPic1()))
                        .setPic2(StringUtils.toString(item.getPic2()))
                        .setPic3(StringUtils.toString(item.getPic3()))
                        .setPic4(StringUtils.toString(item.getPic4()))
                        .setBarcode(StringUtils.toString(item.getUnitBarcode()))
                        .setOutBarcode(StringUtils.toString(item.getOutBarcode()));
                for (B2BOrderCompletedItem.B2BSurchargeItem innerItem : item.getSurchargeItems()) {
                    surchargeItem = MQB2BOrderStatusUpdateMessage.B2BSurchargeItem.newBuilder()
                            .setCategoryId(innerItem.getCategoryId())
                            .setCategoryName(innerItem.getCategoryName())
                            .setItemId(innerItem.getItemId())
                            .setItemName(innerItem.getItemName())
                            .setItemQty(innerItem.getItemQty())
                            .setUnitPrice(innerItem.getUnitPrice())
                            .setTotalPrice(innerItem.getTotalPrice())
                            .build();
                    completedItemBuilder.addSurchargeItems(surchargeItem);
                }
                builder.addCompletedItem(completedItemBuilder.build());
            }
        } else {
            if (reqEntity.getCompletedItems() != null && !reqEntity.getCompletedItems().isEmpty()) {
                MQB2BOrderStatusUpdateMessage.CompletedItem completedItem;
                for (CanboOrderCompleted.CompletedItem item : reqEntity.getCompletedItems()) {
                    completedItem = MQB2BOrderStatusUpdateMessage.CompletedItem.newBuilder()
                            .setItemCode(StringUtils.toString(item.getItemCode()))
                            .setPic1(StringUtils.toString(item.getPic1()))
                            .setPic2(StringUtils.toString(item.getPic2()))
                            .setPic3(StringUtils.toString(item.getPic3()))
                            .setPic4(StringUtils.toString(item.getPic4()))
                            .setBarcode(StringUtils.toString(item.getBarcode()))
                            .setOutBarcode(StringUtils.toString(item.getOutBarcode()))
                            .build();
                    builder.addCompletedItem(completedItem);
                }
            }
        }
        if (reqEntity.getServiceItems() != null && !reqEntity.getServiceItems().isEmpty()) {
            MQB2BOrderStatusUpdateMessage.ServiceItem serviceItem;
            for (B2BOrderServiceItem item : reqEntity.getServiceItems()) {
                serviceItem = MQB2BOrderStatusUpdateMessage.ServiceItem.newBuilder()
                        .setServiceItemId(item.getServiceItemId())
                        .setServiceAt(item.getServiceAt())
                        .setProductId(item.getProductId())
                        .setServiceTypeId(item.getServiceTypeId())
                        .setQty(item.getQty())
                        .setCharge(item.getCharge())
                        .build();
                builder.addServiceItem(serviceItem);
            }
        }
        b2BOrderStatusUpdateMQSender.send(builder.build());
    }


    /**
     * 处理B2B工单的状态变更消息
     */
    public MSResponse processB2BOrderStatusUpdateMessage(MQB2BOrderStatusUpdateMessage.B2BOrderStatusUpdateMessage message) {
        MSResponse response = new MSResponse<>(MSErrorCode.SUCCESS);
        if (B2BDataSourceEnum.isB2BDataSource(message.getDataSource())) {
            if (message.getDataSource() == B2BDataSourceEnum.TMALL.id) {
                response = tmallOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.CANBO.id || message.getDataSource() == B2BDataSourceEnum.USATON.id) {
                response = canboOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.JD.id) {
                response = jdOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.INSE.id) {
                response = inseOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.KONKA.id) {
                response = konkaOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.JOYOUNG.id) {
                response = joyoungOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.SUNING.id) {
                response = suningOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.JDUE.id) {
                response = jdueOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.XYINGYAN.id) {
                response = xyyPlusOrderService.sendOrderStatusUpdateCommandToB2B(message);
            } else if (message.getDataSource() == B2BDataSourceEnum.UM.id) {
                response = umOrderService.sendOrderStatusUpdateCommandToB2B(message);
            }else if (message.getDataSource() == B2BDataSourceEnum.PDD.id) {
                response = pddOrderService.sendOrderStatusUpdateCommandToB2B(message);
            }
        }
        return response;
    }

    //endregion 向队列发送消息、处理消息

    //--------------------------------------------------------------------------------------------------------更新转单进度

    //region 更新B2B转单进度


    /**
     * 调用B2B微服务更新B2B工单转换进度 - 单个工单
     */
    public void updateB2BOrderConversionProgressNew(B2BDataSourceEnum dataSource, String b2bOrderNo, B2BProcessFlag processFlag,
                                                    Long orderId, String orderNo, String b2bQuarter, String processComment, User user, Long b2bOrderId) {
        if (dataSource != null && StringUtils.isNotBlank(b2bOrderNo) && processFlag != null) {
            B2BOrderTransferResult progress = new B2BOrderTransferResult();
            progress.setId(b2bOrderId);
            progress.setB2bOrderId(b2bOrderId);
            progress.setDataSource(dataSource.id);
            progress.setOrderId(orderId);
            progress.setKklOrderNo(orderNo);
            progress.setB2bOrderNo(b2bOrderNo);
            progress.setB2bQuarter(b2bQuarter);
            progress.setProcessFlag(processFlag.value);
            progress.setProcessComment(StringUtils.left(processComment, 250));
            progress.setUpdater(user == null || StringUtils.isBlank(user.getName()) ? KKL_SYSTEM_USER.getName() : user.getName());
            progress.setUpdateDt((new Date()).getTime());
            sendB2BOrderConversionProgressUpdateCommandToB2B(dataSource, Lists.newArrayList(progress));
        }
    }

    /**
     * 调用B2B微服务更新B2B工单转换进度 - 多个工单
     */
    public MSResponse updateB2BOrderConversionProgress(B2BDataSourceEnum dataSource, List<B2BOrderTransferResult> progressList, User user) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource != null && progressList != null && !progressList.isEmpty()) {
            Long nowTimestamp = (new Date()).getTime();
            String userName = (user == null || StringUtils.isBlank(user.getName()) ? KKL_SYSTEM_USER.getName() : user.getName());
            for (B2BOrderTransferResult item : progressList) {
                item.setDataSource(dataSource.id);
                item.setProcessComment(StringUtils.left(item.getProcessComment(), 250));
                item.setUpdater(userName);
                item.setUpdateDt(nowTimestamp);
            }
            response = sendB2BOrderConversionProgressUpdateCommandToB2B(dataSource, progressList);
        }
        return response;
    }

    private MSResponse sendB2BOrderConversionProgressUpdateCommandToB2B(B2BDataSourceEnum dataSource, List<B2BOrderTransferResult> progressList) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (B2BDataSourceEnum.isTooneDataSource(dataSource)) {
            response = canboOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.JD) {
            response = jdOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.INSE) {
            response = inseOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.KONKA) {
            response = konkaOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.JOYOUNG) {
            response = joyoungOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.SUNING) {
            response = suningOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.JDUE) {
            response = jdueOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.XYINGYAN) {
            response = xyyPlusOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.UM) {
            response = umOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        } else if (dataSource == B2BDataSourceEnum.PDD) {
            response = pddOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B(progressList);
        }
        if (!MSResponse.isSuccessCode(response)) {
            String logJson = GsonUtils.toGsonString(progressList);
            LogUtils.saveLog("B2BCenterOrderService.sendB2BOrderConversionProgressUpdateCommandToB2B", "", logJson, null, null);
        }
        return response;
    }

    //endregion 更新B2B转单进度

    //-------------------------------------------------------------------------------------------------检查是否可以进行转单

    //region 检查是否可以进行转单

    public MSResponse checkB2BOrderProcessFlag(B2BDataSourceEnum dataSource, Long b2bOrderId, String b2bOrderNo) {
        B2BOrderTransferResult transferResult = new B2BOrderTransferResult(dataSource.id, b2bOrderNo);
        transferResult.setId(b2bOrderId);
        transferResult.setB2bOrderId(b2bOrderId);
        return checkB2BOrderProcessFlag(Lists.newArrayList(transferResult), dataSource);
    }

    /**
     * 检查工单是否允许进行转单操作
     */
    public MSResponse checkB2BOrderProcessFlag(List<B2BOrderTransferResult> b2bOrderNos, B2BDataSourceEnum dataSource) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (B2BDataSourceEnum.isTooneDataSource(dataSource)) {
            response = canboOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.JD) {
            response = jdOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.INSE) {
            response = inseOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.KONKA) {
            response = konkaOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.JOYOUNG) {
            response = joyoungOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.SUNING) {
            response = suningOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.JDUE) {
            response = jdueOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.XYINGYAN) {
            response = xyyPlusOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.UM) {
            response = umOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        } else if (dataSource == B2BDataSourceEnum.PDD) {
            response = pddOrderService.checkB2BOrderProcessFlag(b2bOrderNos);
        }
        return response;
    }

    //endregion 检查是否可以进行转单

    //-----------------------------------------------------------------------------------------------------------取消转单

    //region 取消转单

    public MSResponse cancelOrderTransition(B2BOrderTransferResult b2BOrderTransferResult, B2BDataSourceEnum dataSource) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (B2BDataSourceEnum.isTooneDataSource(dataSource)) {
            response = canboOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.JD) {
            response = jdOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.INSE) {
            response = inseOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.KONKA) {
            response = konkaOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.JOYOUNG) {
            response = joyoungOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.SUNING) {
            response = suningOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.JDUE) {
            response = jdueOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.XYINGYAN) {
            response = xyyPlusOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.UM) {
            response = umOrderService.cancelOrderTransition(b2BOrderTransferResult);
        } else if (dataSource == B2BDataSourceEnum.PDD){
            response = pddOrderService.cancelOrderTransition(b2BOrderTransferResult);
        }
        return response;
    }

    public MSResponse directlyCancelOrderTransition(B2BOrderTransferResult b2BOrderTransferResult, B2BDataSourceEnum dataSource) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.directlyCancelOrderTransition(b2BOrderTransferResult);
        }
        return response;
    }

    /**
     * 忽略（直接关掉工单）
     */
    public MSResponse ignoreOrderTransition(B2BOrderTransferResult b2BOrderTransferResult, B2BDataSourceEnum dataSource) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.ignoreOrderTransition(b2BOrderTransferResult);
        }
        return response;
    }

    //endregion 取消转单

    //-----------------------------------------------------------------------------------------------------------更新B2B工单的异常标记

    //region 更新B2B工单的异常标记

    public MSResponse updateOrderAbnormalFlagBatch(B2BDataSourceEnum dataSource) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.updateAbnormalOrderFlagAll();
        } else if (dataSource == B2BDataSourceEnum.PDD) {
            response = pddOrderService.updateInstallFlag();
        }
        return response;
    }

    //endregion 更新B2B工单的异常标记

    //region 更新B2B工单的路由标记

    public MSResponse updateOrderRoutingFlagBatch(B2BDataSourceEnum dataSource) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (dataSource == B2BDataSourceEnum.TMALL) {
            response = tmallOrderService.updateOrderRoutingFlagAll();
        } else if (dataSource == B2BDataSourceEnum.JD) {
            response = jdOrderService.updateOrderRoutingFlagAll();
        } else if (dataSource == B2BDataSourceEnum.JDUE) {
            response = jdueOrderService.updateOrderRoutingFlagAll();
        } else if (dataSource == B2BDataSourceEnum.SUNING) {
            response = suningOrderService.updateOrderRoutingFlagAll();
        }
        return response;
    }

    //endregion 更新B2B工单的异常标记


    //-----------------------------------------------------------------------------------------------------------更新B2B微服务DB的工单状态
    //region 更新B2B微服务DB的工单状态

    private MSResponse updateOrderStatus(B2BDataSourceEnum dataSource, Long customerId, Long kklOrderId, B2BOrderStatusEnum status) {
        return updateOrderStatus(dataSource, customerId, kklOrderId, status, null);
    }

    private MSResponse updateOrderStatus(B2BDataSourceEnum dataSource, Long customerId, Long kklOrderId, B2BOrderStatusEnum status, Date closeDate) {
        MSResponse response = new MSResponse(MSErrorCode.SUCCESS);
        if (B2BMDUtils.isOrderStatusUpdateEnabled(dataSource, customerId) && kklOrderId != null && kklOrderId > 0 && status != null) {
            response = umOrderService.updateOrderStatus(kklOrderId, status, closeDate == null ? 0 : closeDate.getTime());
        }
        return response;
    }

    //endregion 更新B2B微服务DB的工单状态

}
