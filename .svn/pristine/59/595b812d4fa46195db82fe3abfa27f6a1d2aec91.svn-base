package com.wolfking.jeesite.modules.customer.md.web;

import com.google.common.collect.Lists;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.common.config.Global;
import com.wolfking.jeesite.common.persistence.AjaxJsonEntity;
import com.wolfking.jeesite.common.persistence.Page;
import com.wolfking.jeesite.common.web.BaseController;
import com.wolfking.jeesite.modules.customer.md.service.CtCustomerAccountService;
import com.wolfking.jeesite.modules.md.entity.Customer;
import com.wolfking.jeesite.modules.md.entity.CustomerAccountProfile;
import com.wolfking.jeesite.modules.sys.entity.Role;
import com.wolfking.jeesite.modules.sys.entity.User;
import com.wolfking.jeesite.modules.sys.service.SystemService;
import com.wolfking.jeesite.modules.sys.utils.UserUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Objects;


@Slf4j
@Controller
@RequestMapping(value="${adminPath}/customer/md/customerAccount")
public class CtCustomerAccountController extends BaseController {
    @Autowired
    private CtCustomerAccountService ctCustomerAccountService;

    @Autowired
    private SystemService systemService;

    @RequiresPermissions("md:customeraccount:view")
    @RequestMapping(value = "list")
    public String accountList(User user, HttpServletRequest request, HttpServletResponse response, Model model) {
        try {
            User cuser = UserUtils.getUser();
            if (cuser.isCustomer()) {
                CustomerAccountProfile profile = new CustomerAccountProfile();
                profile.setCustomer(cuser.getCustomerAccountProfile().getCustomer());
                profile.setOrderApproveFlag(cuser.getCustomerAccountProfile().getOrderApproveFlag());
                user.setCustomerAccountProfile(profile);
            } else if (cuser.isSalesPerson()) {
                user.setSalesId(cuser.getId());
            }
            user.setDelFlag(null);
            Page<User> page = ctCustomerAccountService.findCustomerAccountProfile(new Page<>(request, response), user);
            model.addAttribute("page", page);
            model.addAttribute("user", user);
        } catch (Exception e) {
            log.error("CtCustomerAccountController.accountList", e);
        }

        return "modules/customer/md/ctCustomerAccountList";
    }

    @RequiresPermissions("md:customeraccount:view")
    @RequestMapping(value = "form")
    public String accountForm(User user, Model model) {
        User currentUser = UserUtils.getUser();
        if (user.getId() != null && user.getId() != 0) {  //edit
            user = ctCustomerAccountService.getAccount(user.getId());
        } else {
            if (StringUtils.isBlank(user.getName())) {
                //new
                CustomerAccountProfile profile = new CustomerAccountProfile(0);
                if (currentUser.isCustomer()) {
                    profile.setCustomer(currentUser.getCustomerAccountProfile().getCustomer());
                }
                profile.setOrderApproveFlag(0);
                user.setUserType(User.USER_TYPE_SUBCUSTOMER);
                user.setCustomerAccountProfile(profile);
            }
        }

        model.addAttribute("currentuser", currentUser);
        model.addAttribute("user", user);
        return "modules/customer/md/ctCustomerAccountForm";
    }

    @RequiresPermissions("md:customeraccount:edit")
    @RequestMapping(value = "save")
    public String saveAccount(User user, String oldLoginName, String newPassword, HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) {
        // 如果新密码为空，则不更换密码
        if (StringUtils.isNotBlank(newPassword)) {
            user.setPassword(SystemService.entryptPassword(newPassword));
        }
        if (!beanValidator(model, user)) {
            return accountForm(user, model);
        }
        if (!"true".equals(checkLoginName(oldLoginName, user.getLoginName(), null))) {
            addMessage(model, "保存客户" + (user.getUserType() == User.USER_TYPE_CUSTOMER ? "" : (user.getUserType() == User.USER_TYPE_SEARCH_CUSTOMER ? "查询" : "子")) + "帐号'" + user.getLoginName() + "'失败，登录名已存在");
            return accountForm(user, model);
        }
        if (user.getCustomerAccountProfile().getOrderApproveFlag() < 0) {
            user.getCustomerAccountProfile().setOrderApproveFlag(0);
        }

		/* 一个客户只有一个主账号
		if (user.getUserType() == User.USER_TYPE_CUSTOMER && true == customerService.hasOtherPrimaryAccount(user.getCustomerAccountProfile().getCustomer().getId(),user.getId()))
		{
			addMessage(model, "该客户已存在主帐号，不能添加多个主账号");
			return accountForm(user, model);
		}*/
		/* company
		customerService.clear();
		CustomerAccountProfile profile = user.getCustomerAccountProfile();
		Customer customer = customerService.get(profile.getCustomer().getId());
		profile.setCustomer(customer);
		user.setCompany(customer.getCompany());
		*/
        // 角色数据有效性验证，过滤不在授权内的角色
        Role r;
        if (user.getUserType() == User.USER_TYPE_SEARCH_CUSTOMER) {
            r = systemService.getRoleByEnname("SearchCustomer");
        } else {
            long roleId = 4L;
            if (user.getUserType() == User.USER_TYPE_SUBCUSTOMER) {
                roleId = 5L;
            }
            r = systemService.getRoleById(Objects.equals(user.getUserType(), User.USER_TYPE_CUSTOMER) ? 4l : 5l);
        }

        List<Role> roleList = systemService.findUserRoles(user);
        long count = roleList.stream().filter(i -> i.getId().equals(r.getId())).count();
        if(count == 0){
            roleList.add(r);
        }

        user.setRoleList(roleList);
        boolean isNew = user.getIsNewRecord();
        //save
        ctCustomerAccountService.save(user);
        addMessage(redirectAttributes, "保存客户".concat(user.getUserType().equals(User.USER_TYPE_CUSTOMER) ? "" : "子").concat("账号人员'").concat(user.getLoginName()).concat("'成功"));

        Customer customer = user.getCustomerAccountProfile().getCustomer();
        return String.format("redirect:%s/customer/md/customerAccount/list?repage&customerAccountProfile.customer.id=%s&userType=0", Global.getAdminPath(), customer.getId());
    }

    @RequiresPermissions("md:customeraccount:edit")
    @RequestMapping(value = "delete")
    public String delete(User user, RedirectAttributes redirectAttributes) {
        if (UserUtils.getUser().getId().equals(user.getId())) {
            addMessage(redirectAttributes, "停用帐号失败, 不允许停用当前帐号");
        } else if (User.isAdmin(user.getId())) {
            addMessage(redirectAttributes, "停用帐号失败, 不允许停用超级管理员帐号");
        } else {
            systemService.deleteUser(user);
            addMessage(redirectAttributes, "停用帐号[ " + user.getLoginName() + " ]成功");
        }
        Customer customer = null;
        try {
            customer = user.getCustomerAccountProfile().getCustomer();
        } catch (Exception e) {
        }
        if (customer != null && customer.getId() != null) {
            return String.format("redirect:%s/customer/md/customerAccount/list?repage&customerAccountProfile.customer.id=%s&userType=0", Global.getAdminPath(), customer.getId());

        } else {
            return "redirect:" + adminPath + "/customer/md/customerAccount/list?repage";
        }
    }

    @RequiresPermissions("md:customeraccount:edit")
    @RequestMapping(value = "enable")
    public String enableAccount(User user, RedirectAttributes redirectAttributes) {
        systemService.enableUser(user);
        addMessage(redirectAttributes, "启用[ " + user.getLoginName() + " ]成功");
        try {
            CustomerAccountProfile profile = ctCustomerAccountService.getCustomerAccountProfileByUserId(user.getId());
            if (profile != null) {
                return String.format("redirect:%s/custoemr/md/customerAccount/list?repage&customerAccountProfile.customer.id=%s&userType=0", Global.getAdminPath(), profile.getCustomer().getId());
            } else {
                return "redirect:" + adminPath + "/customer/md/customerAccount/list?repage";
            }
        } catch (Exception e) {
            addMessage(redirectAttributes, "启用[ " + user.getLoginName() + " ]失败," + e.getMessage());
            return "redirect:" + adminPath + "/customer/md/customerAccount/list?repage";
        }
    }

    @ResponseBody
    @RequestMapping(value = "checkLoginName")
    public String checkLoginName(String oldLoginName, String loginName, @RequestParam(required = false) String expectId) {
        User user = UserUtils.getUser();
        if (user == null || user.getId() == null) {
            return "false";
        }
        Long id = null;
        if (StringUtils.isNoneBlank(expectId)) {
            try {
                id = Long.valueOf(expectId);
            } catch (Exception e) {
            }
        }
        if (loginName != null && loginName.equals(oldLoginName)) {
            return "true";
        } else if (loginName != null
                && systemService.checkLoginName(id, loginName) == 0) {
            return "true";
        }

        return "客户账号人员登录名已存在";
    }

    /**
     * 检查客户帐号手机号是否注册
     * @param id    帐号id
     * @param phone    手机号
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "checkMasterPhone")
    public AjaxJsonEntity checkMasterPhone(String id, String phone) {
        AjaxJsonEntity result = new AjaxJsonEntity(true);
        if (StringUtils.isBlank(phone)) {
            return result;
        }
        Long userId = systemService.checkLoginName(StringUtils.isBlank(id) ? null : Long.valueOf(id), phone);
        if (userId != null && userId > 0) {
            result.setMessage("手机号已注册");
            result.setSuccess(false);
        }
        return result;
    }

    /**
     * 重置密码
     * @param id  账户id
     * @return
     */
    @ResponseBody
    @RequiresPermissions("md:customeraccount:edit")
    @RequestMapping(value = "resetPassword")
    public AjaxJsonEntity resetPassword(String id, HttpServletResponse response) {
        response.setContentType("application/json; charset=UTF-8");
        AjaxJsonEntity result = new AjaxJsonEntity(true);
        if (StringUtils.isBlank(id)) {
            result.setSuccess(false);
            result.setMessage("参数错误");
            return result;
        }
        Long lid = Long.valueOf(id);
        if (lid <= 0l) {
            result.setSuccess(false);
            result.setMessage("参数错误");
            return result;
        }

        User cuser = UserUtils.getUser();
        if (cuser == null || cuser.getId() == null) {
            result.setSuccess(false);
            result.setMessage("登录超时，请重新登录。");
            return result;
        }
        User user = ctCustomerAccountService.getAccount(lid);
        if (user == null || user.getId() == null) {
            result.setSuccess(false);
            result.setMessage("客户帐号不存在或已停用");
            return result;
        }
        if (user.getMobile().trim().length() < 6) {
            result.setSuccess(false);
            result.setMessage("手机号长度不到6，");
            return result;
        }
        try {
            user.preUpdate();
            String pwd = new String("");
            pwd = StringUtils.right(user.getMobile().trim(), 6);
            //手机号后6位
            user.setPassword(SystemService.entryptPassword(pwd));
            ctCustomerAccountService.resetPassword(user);
            //清除该帐号登录内容
            try {
                UserUtils.clearCache(user);
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        } catch (Exception e) {
            result.setSuccess(false);
            result.setMessage("更改密码时发生错误：" + e.getMessage());
        }
        return result;
    }
}
