package com.wolfking.jeesite.modules.md.web;

import com.google.common.collect.Lists;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.md.MDCustomer;
import com.kkl.kklplus.entity.md.MDCustomerAddress;
import com.kkl.kklplus.entity.md.MDCustomerEnum;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.common.config.Global;
import com.wolfking.jeesite.common.persistence.AjaxJsonEntity;
import com.wolfking.jeesite.common.persistence.Page;
import com.wolfking.jeesite.common.web.BaseController;
import com.wolfking.jeesite.modules.md.entity.Customer;
import com.wolfking.jeesite.modules.md.entity.CustomerFinance;
import com.wolfking.jeesite.modules.md.entity.CustomerProduct;
import com.wolfking.jeesite.modules.md.service.CustomerNewService;
import com.wolfking.jeesite.modules.md.service.CustomerService;
import com.wolfking.jeesite.modules.sys.entity.Dict;
import com.wolfking.jeesite.modules.sys.entity.User;
import com.wolfking.jeesite.modules.sys.service.SystemService;
import com.wolfking.jeesite.modules.sys.utils.AreaUtils;
import com.wolfking.jeesite.modules.sys.utils.SeqUtils;
import com.wolfking.jeesite.modules.sys.utils.UserUtils;
import com.wolfking.jeesite.ms.providermd.service.MSCustomerNewService;
import com.wolfking.jeesite.ms.providermd.service.MSCustomerService;
import com.wolfking.jeesite.ms.utils.MSDictUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 客戶Controller
 *
 * @author ThinkGem
 * @version 2013-3-23
 */
@Slf4j
@Controller
@RequestMapping(value = "${adminPath}/md/customerNew")
public class CustomerNewController extends BaseController {

    @Autowired
    private CustomerService customerService;

    @Autowired
    private MSCustomerNewService msCustomerNewService;

    @Autowired
    private CustomerNewService customerNewService;

    @Autowired
    private SystemService systemService;

    //客户管理 （新）  开始
    @RequestMapping(value = {"list"})
    public String list(MDCustomer mdCustomer, HttpServletRequest request, HttpServletResponse response, Model model) {

        if (!SecurityUtils.getSubject().isPermitted("md:customer:view")) {
            addMessage(model, "未开通浏览权限");
            model.addAttribute("page", new Page<MDCustomer>());
            model.addAttribute("mdCustomer", new MDCustomer());
            return "modules/md/customerListMSNew";
        }
        //  微服务调用获取客户信息
        if (mdCustomer == null) {
            mdCustomer = new MDCustomer();
        }
        User user = UserUtils.getUser();

        if (user.isSalesPerson()) {
            mdCustomer.setSalesId(user.getId());
        } else {
            if (user.isMerchandiser()) {
                mdCustomer.setMerchandiserId(user.getId());
            }
            if (mdCustomer.getId() == null && StringUtils.isBlank(mdCustomer.getCode()) && StringUtils.isBlank(mdCustomer.getPhone())) {
                addMessage(model, "请选择客户或输入负责人电话");
                model.addAttribute("page", new Page<MDCustomer>());
                model.addAttribute("mdCustomer", mdCustomer);
                return "modules/md/customerListMSNew";
            }
        }

        Page<MDCustomer> page = customerNewService.findMDCustomerNewList(new Page<MDCustomer>(request, response), mdCustomer);
        model.addAttribute("page", page);
        model.addAttribute("mdCustomer", mdCustomer);

        return "modules/md/customerListMSNew";
    }

    @RequiresPermissions("md:customer:edit")
    @RequestMapping(value = "form")
    public String form(Customer customer, Model model) {
        User user = UserUtils.getUser();
        List<Dict> customerSignClassify = MSDictUtils.getDictList("customer_sign_classify");
        if (customer.getId() == null) {

            if (user.isSalesPerson()) {
                customer.setSales(user);//自己
            }

            CustomerFinance finance = new CustomerFinance();
            Dict paymentType = new Dict();
            //切换为微服务
            paymentType.setId(MSDictUtils.getDictByValue(String.valueOf(CustomerFinance.YF), "PaymentType").getId());
            paymentType.setValue(String.valueOf(CustomerFinance.YF));
            paymentType.setLabel("预付");
            paymentType.setType("PaymentType");
            finance.setPaymentType(paymentType);//预付
            customer.setFinance(finance);
            List<MDCustomerAddress> customerAddressList = new ArrayList<>();
            customerAddressList.add(new MDCustomerAddress(MDCustomerEnum.CustomerAddressType.CUSTOMERADDR.getValue(), MDCustomerEnum.CustomerAddressType.CUSTOMERADDR.getLabel()));
            customerAddressList.add(new MDCustomerAddress(MDCustomerEnum.CustomerAddressType.SHIPADDR.getValue(), MDCustomerEnum.CustomerAddressType.SHIPADDR.getLabel()));
            customerAddressList.add(new MDCustomerAddress(MDCustomerEnum.CustomerAddressType.RETURNADDR.getValue(), MDCustomerEnum.CustomerAddressType.RETURNADDR.getLabel()));
            customer.setCustomerAddresses(customerAddressList);
            model.addAttribute("productIds", "");


        } else {
            customer = customerNewService.get(customer.getId());
            if (customer != null) {
                List<String> nameIdList = Lists.newArrayList();
                List<CustomerProduct> productcustomerList = customerService.getListByCustomer(customer.getId());
                for (CustomerProduct p : productcustomerList) {
                    nameIdList.add(Long.toString(p.getProduct().getId()));
                }

                model.addAttribute("productIds", StringUtils.join(nameIdList, ","));
            }

        }
        model.addAttribute("customer", customer);
        model.addAttribute("customerSignClassify", customerSignClassify);

        return "modules/md/customerFormNew";
    }

    @RequestMapping(value = "customerAddressForms")
    public String customerAddressForms(MDCustomerAddress customerAddress, Model model) {
        MDCustomerAddress address = new MDCustomerAddress();

        if(customerAddress.getCustomerId() != null){
            address = msCustomerNewService.getCustomerAddress(customerAddress.getCustomerId(), customerAddress.getAddressType());
        }
        String fullName = "";
        if (address != null) {
            if (AreaUtils.getCountyFullName(address.getAreaId()) != null) {
                fullName = AreaUtils.getCountyFullName(address.getAreaId());
            }
            if (address.getAddressType() == null) {
                address.setAddressType(customerAddress.getAddressType());
            }
            address.setAddressTypeName(MDCustomerEnum.CustomerAddressType.fromValue(customerAddress.getAddressType()).getLabel());

            if(address.getCustomerId() == null){
                address.setCustomerId(customerAddress.getCustomerId());
            }
        } else {
            address = new MDCustomerAddress();
            address.setAddressType(customerAddress.getAddressType());
            address.setAddressTypeName(MDCustomerEnum.CustomerAddressType.fromValue(customerAddress.getAddressType()).getLabel());
            if (customerAddress.getCustomerId() != null) {
                address.setCustomerId(customerAddress.getCustomerId());
            }
        }

        model.addAttribute("customerAddress", address);
        model.addAttribute("fullName", fullName);

        return "modules/md/customerAddressForm";
    }

    @RequestMapping(value = "saveCustomerAddress")
    @ResponseBody
    public AjaxJsonEntity saveCustomerAddress(MDCustomerAddress customerAddress, Model model) {
        AjaxJsonEntity ajaxJsonEntity = new AjaxJsonEntity(true);
        if (!beanValidator(model, customerAddress)) {
            ajaxJsonEntity.setSuccess(false);
            return ajaxJsonEntity;
        }

        try {
            if (customerAddress.getCustomerId() != null) {
                User user = UserUtils.getUser();
                MSResponse<Integer> response;

                if (customerAddress.getId() != null) {
                    customerAddress.setUpdateById(user.getId());
                    customerAddress.setUpdateDate(new Date());
                    response = msCustomerNewService.updateCustomerAddress(customerAddress);
                } else {
                    customerAddress.setCreateById(user.getId());
                    customerAddress.setCreateDate(new Date());
                    response = msCustomerNewService.insertCustomerAddress(customerAddress);
                }
                if (response.getCode() > MSErrorCode.SUCCESS.getCode()) {
                    ajaxJsonEntity.setSuccess(false);
                    ajaxJsonEntity.setMessage(response.getMsg());
                } else {
                    ajaxJsonEntity.setMessage("保存地址成功");
                }
            }
            ajaxJsonEntity.setData(customerAddress.getAddressType());

            return ajaxJsonEntity;

        } catch (Exception ex) {
            ajaxJsonEntity.setSuccess(false);
            ajaxJsonEntity.setMessage(ex.getMessage());
            return ajaxJsonEntity;
        }

    }

    @RequestMapping(value = "customerFinanceForms")
    public String customerFinanceForms(Long customerId,String financeType, Model model) {
        CustomerFinance customerFinance = new CustomerFinance();
        if(customerId != null){
            customerFinance = customerService.getFinance(customerId);
            if(customerFinance == null){
                customerFinance = new CustomerFinance();
                customerFinance.setId(customerId);
            }
        }
        model.addAttribute("customerFinance", customerFinance);
        model.addAttribute("financeType", financeType);


        return "modules/md/customerFinanceForm";
    }

    @RequestMapping(value = "saveCustomerFinance")
    @ResponseBody
    public AjaxJsonEntity saveCustomerFinance(CustomerFinance customerFinance, Integer financeType,Model model) {
        AjaxJsonEntity ajaxJsonEntity = new AjaxJsonEntity(true);
        if (!beanValidator(model, customerFinance)) {
            ajaxJsonEntity.setSuccess(false);
            return ajaxJsonEntity;
        }
        try {
            if(customerFinance.getId() != null){
                customerNewService.saveCustomerFinance(customerFinance,financeType);
            }
            ajaxJsonEntity.setMessage("保存成功");
            return ajaxJsonEntity;

        } catch (Exception ex) {
            ajaxJsonEntity.setSuccess(false);
            ajaxJsonEntity.setMessage(ex.getMessage());
            return ajaxJsonEntity;
        }

    }
    @RequiresPermissions("md:customer:edit")
    @ResponseBody
    @RequestMapping(value = "save")
    public AjaxJsonEntity save(Customer customer, String oldCode, Double oldCredit, Model model, RedirectAttributes redirectAttributes) {
        AjaxJsonEntity ajaxJsonEntity = new AjaxJsonEntity(true);
        if (!StringUtils.isNotBlank(customer.getCode())) {
            customer.setCode(SeqUtils.NextSequenceNo("Customer"));//新的方法
        }

        if (customer.getId() != null && customer.getId() > 0) {
            if (!"true".equals(checkCustomerCode(oldCode, customer.getCode()))) {
                addMessage(model, "客户'" + customer.getCode() + "'已存在");
            }
        }
        try {
            customerNewService.save(customer, oldCredit);

            addMessage(redirectAttributes, "保存客戶'" + customer.getName() + "'成功");
        } catch (Exception e) {
            log.error("保存客戶{}失败", e);
            ajaxJsonEntity.setSuccess(false);
            addMessage(redirectAttributes, "保存客戶'" + customer.getName()
                    + "'失败:" + e.getMessage());
        }
        return ajaxJsonEntity;
    }

    @RequestMapping(value = "salesChangeForm")
    public String salesUpdateForm(Customer customer, Model model) {

        if (customer.getId() != null) {
            customer = customerService.get(customer.getId());
        }
        model.addAttribute("customer", customer);

        return "modules/md/customerSalesFormNew";
    }

    @RequestMapping(value = "merchandiserChangeForm")
    public String merchandiserUpdateForm(Customer customer, Model model) {
        if (customer.getId() != null) {
            customer = customerService.get(customer.getId());
        }
        model.addAttribute("customer", customer);

        return "modules/md/customerMerchandiserFormNew";
    }

    @RequiresPermissions("md:customer:edit")
    @RequestMapping(value = "delete")
    public String delete(String id, RedirectAttributes redirectAttributes) {

        if (Global.isDemoMode()) {
            addMessage(redirectAttributes, "演示模式，不允许操作！");
            return "redirect:" + Global.getAdminPath() + "/md/customerNew/list?repage";
        }

        customerService.deleteById(Long.parseLong(id));

        addMessage(redirectAttributes, "删除客戶成功");

        return "redirect:" + Global.getAdminPath() + "/md/customerNew/list?repage";

    }
    /**
     * 检查客户帐号手机号是否注册
     *
     * @param id 帐号id
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "checkPhone")
    public AjaxJsonEntity checkPhone(Long id, String phone) {
        AjaxJsonEntity result = new AjaxJsonEntity(true);
        if (StringUtils.isBlank(phone)) {
            return result;
        }
        Long userId = systemService.checkLoginName(id, phone);
        if(id == null){
            if (userId > 0) {
                result.setMessage("手机号已注册");
                result.setSuccess(false);
            }
        }else {
            if (userId != 0 && !userId.equals(id)) {
                result.setMessage("手机号已注册");
                result.setSuccess(false);
            }
        }

        return result;
    }

    /**
     * 检查客户编号是否注册
     *
     * @param oldLoginName
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "checkLoginName")
    public String checkCustomerCode(String oldLoginName, String code) {
        if (code != null && code.equals(oldLoginName)) {
            return "true";
        } else if (code != null && !customerService.existsCustomerByCode(code)) {
            return "true";
        }
        return "false";
    }

    /**
     * 检查客户名称是否注册
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "checkCustomerName")
    public String checkCustomerName(Long customerId,HttpServletRequest request) {
        String name = request.getParameter("name");
        return customerNewService.existsCustomerByName(customerId,name);
    }


    //客户管理 （新）  结束
}
