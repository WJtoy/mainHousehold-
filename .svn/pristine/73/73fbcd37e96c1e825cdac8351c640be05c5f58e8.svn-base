package com.wolfking.jeesite.test.md;

import com.google.common.collect.Lists;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.common.NameValuePair;
import com.wolfking.jeesite.common.utils.GsonUtils;
import com.wolfking.jeesite.common.utils.RedisUtils;
import com.wolfking.jeesite.modules.md.entity.Engineer;
import com.wolfking.jeesite.modules.md.entity.ServicePoint;
import com.wolfking.jeesite.modules.md.entity.ServicePrice;
import com.wolfking.jeesite.modules.md.entity.viewModel.ServicePointModel;
import com.wolfking.jeesite.modules.md.service.ServicePointService;
import com.wolfking.jeesite.modules.md.utils.ServicePointAdapter;
import com.wolfking.jeesite.modules.sys.entity.User;
import com.wolfking.jeesite.ms.providermd.service.MSServicePointPriceService;
import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import javax.annotation.Resource;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * Created by ryan
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
@Slf4j
@ActiveProfiles("dev")
public class ServicePointTest {

    @Autowired
    private ServicePointService servicePointService;

    @Resource(name="servicePointAdapter")
    private ServicePointAdapter servicePointAdapter;

    @Autowired
    private MSServicePointPriceService msServicePointPriceService;

    @Test
    public void getEngineerFromCache(){
        Engineer engineer = servicePointService.getEngineerFromCache(22670l,23579l);
        Assert.assertNotNull(engineer);
        System.out.println("engineer:" + engineer.getName() +",accountId:" + engineer.getAccountId().toString());
    }

    @Test
    public void getServicePointFromRedis(){
        //ServicePoint point = servicePointService.getFromCache(1622034l);
        ServicePoint point = servicePointService.getFromCache(1622036L);
        log.info(ServicePointAdapter.getInstance().toJson(point));
        //Assert.assertTrue("主帐号未登录过app",point.getPrimary().getAppLoged().equals(1));
        //System.out.println(point.getName());
        /*
        ServicePoint point = (ServicePoint) redisUtils.zRangeOneByScore(RedisConstant.RedisDBType.REDIS_MD_DB,RedisConstant.MD_SERVICEPOINT_ALL,1,1,ServicePoint.class);
        if(point == null){
            System.out.println("null");
        }else{
            System.out.println(String.format("id:%s name:%s bank:%s",point.getId(),point.getName(),point.getFinance().getBank().getLabel()));
        }*/
    }

    @Test
    public void getServicePointFromDb(){
        ServicePoint point = servicePointService.get(1622034l);
        log.info(ServicePointAdapter.getInstance().toJson(point));
    }

    @Test
    public void getServicePrice(){
        //List<ServicePrice> prices =servicePointService.getPricesFromCache(58l);
        //if(prices == null || prices.size()==0){
        //    System.out.println("no data");
        //}else {
        //    String json = GsonUtils.getInstance().toGson(prices);
        //    System.out.println(json);
        //}
        //try {
        //    TimeUnit.SECONDS.sleep(10l);
        //} catch (InterruptedException e) {
        //    e.printStackTrace();
        //}
        //prices =servicePointService.getPricesFromCache(58l);
        //if(prices == null || prices.size()==0){
        //    System.out.println("no data");
        //}else {
        //    String json = GsonUtils.getInstance().toGson(prices);
        //    System.out.println(json);
        //}
    }

    @Test
    public void getEngineersFromCache(){
        List<Engineer> list = servicePointService.getEngineersFromCache(21242l);
        Assert.assertNotNull(list);
        Assert.assertTrue(list.size()>0);
        list.forEach(t->{
            System.out.println(t.getId() + " "+t.getName());
        });

    }

    @Test
    public void getEngineerAccountsListByAreaAndProductCategory(){
        List<User> users = servicePointService.getEngineerAccountsListByAreaAndProductCategory(3403L,1L);
        if(users !=null && users.size()>0){
            for(User user:users) {
                System.out.println("appFlag:" + user.getAppFlag() + " id:" + user.getId() + " name:" + user.getName() + " short:" + user.getShortMessageFlag());
            }
        }
    }

    /**
     * 按网点id列表生成同步更新缓存的命令
     * 在阿里云DMS命令窗口中执行，先执行"select 2"
     */
    @Test
    public void syncRedisCache(){
        Integer[] ids = new Integer[]{
                485,585,780,1636,2745,5090,5111,5127,5130,5138,5163,5166,5171,5205,5224,5226,5241,5280,5284,5291,5311,5342,5358,5376,5393,5430,5446,5466,5484,5491,5494,5495,5507,5527,5533,5573,5587,5597,5604,5639,5650,5652,5655,5678,5690,5724,5734,5745,5749,5750,5754,5765,5770,5797,5811,5823,5825,5857,5871,5891,5915,5923,5929,5933,5951,5968,5979,5998,6001,6006,6010,6028,6066,6067,6069,6079,6116,6122,6133,6142,6163,6196,6213,6218,6223,6238,6242,6263,6273,6324,6353,6358,6359,6376,6378,6381,6396,6404,6410,6419,6462,6463,6481,6501,6538,6539,6551,6557,6573,6575,6578,6579,6620,6631,6632,6651,6656,6663,6686,6710,6717,6722,6751,6768,6775,6783,6809,6824,6848,6881,6897,6900,6905,6907,6936,6949,6953,6966,6973,6974,7000,7020,7027,7029,7035,7049,7058,7067,7075,7084,7086,7088,7096,7103,7108,7111,7119,7146,7161,7181,7192,7196,7200,7205,7215,7219,7232,7234,7239,7251,7253,7255,7262,7276,7283,7289,7296,7298,7303,7332,7338,7340,7347,7351,7364,7369,7381,7385,7395,7403,7408,7416,7426,7449,7465,7491,7503,7521,7532,7538,7546,7556,7566,7571,7580,7583,7601,7626,7637,7672,7677,7683,7688,7689,7697,7698,7700,7736,7760,7786,7790,7817,7819,7831,7832,7834,7838,7847,7849,7851,7856,7869,7902,7926,7927,7929,7936,7955,7969,7982,7987,7991,8017,8060,8063,8069,8088,8091,8095,8117,8123,8128,8129,8146,8182,8191,8212,8217,8243,8247,8252,8257,8261,8271,8278,8280,8299,8315,8322,8334,8339,8352,8356,8360,8365,8409,8414,8425,8426,8430,8433,8437,8444,8464,8469,8473,8476,8484,8510,8536,8555,8565,8566,8572,8585,8598,8610,8632,8637,8640,8643,8658,8682,8687,8712,8713,8720,8742,8743,8748,8750,8751,8761,8767,8770,8771,8794,8805,8807,8855,8889,8893,8905,8911,8917,8922,8958,8960,8971,8976,8978,8980,8988,8996,9003,9007,9009,9018,9043,9050,9055,9071,9075,9132,9158,9170,9187,9189,9209,9225,9238,9241,9259,9279,9280,9297,9308,9313,9320,9334,9341,9353,9355,9356,9390,9408,9414,9421,9429,9435,9451,9467,9484,9505,9512,9535,9544,9553,9559,9560,9573,9588,9629,9630,9648,9651,9663,9724,9727,9743,9744,9778,9779,9781,9784,9816,9823,9824,9828,9877,9886,9895,9897,9905,9946,9957,9961,9974,9982,9987,9989,10005,10022,10025,10030,10050,10063,10077,10085,10104,10105,10112,10124,10130,10133,10151,10181,10195,10221,10223,10232,10238,10240,10275,10276,10288,10291,10292,10307,10311,10312,10317,10337,10339,10346,10347,10351,10392,15513,16289,16363,16424,16439,16448,16469,16488,16536,16540,16630,16658,16666,16676,16677,16718,16728,16781,16819,17545,17547,17557,17648,17649,17663,17710,17727,17729,17760,17765,17799,17809,17877,17930,17962,17980,18043,18062,18069,18089,18174,18183,18196,18203,18227,18230,18325,18372,18403,18450,18455,18456,18474,18525,18563,18573,18577,18599,18612,18619,18628,18669,18678,18713,18730,18754,18783,18878,19008,19063,19075,19084,19103,19124,19164,19212,19216,19220,19321,19353,19371,19397,19409,19414,19415,19515,19521,19634,19643,19678,19836,19850,20051,20068,20072,20077,20085,20090,20091,20183,20222,20239,20259,20262,20311,20351,20375,20393,20406,20423,20432,20533,20580,20607,20661,20674,20761,20774,20786,20821,20864,20867,20893,20927,20928,20984,21018,21024,21045,24032,25780,25795,25800,25803,25804,25807,25810,25812,25813,25815,25816,25820,25825,25827,25829,25834,25842,25843,25847,25852,25853,25861,25863,25864,25865,25867,25869,25870,25873,25877,25879,25880,25883,25884,25901,25902,25905,25907,25909,25910,25919,25923,25929,25930,25931,25932,25936,25938,25940,25943,25946,25950,25951,25960,25963,25966,25969,25970,25971,25974,25977,25979,25985,25986,25988,25991,26003,26005,26009,26011,26012,26013,26016,26018,26019,26020,26023,26024,26027,26028,26030,26031,26033,26036,26037,26043,26045,26049,26056,26058,26059,26060,26063,26066,26069,26072,26075,26078,26079,26086,26092,26099,26101,26102,26106,26110,26111,26113,26115,26116,26120,26128,26130,26134,26136,26138,26140,26141,26148,26149,26153,26154,26156,26157,26162,26163,26165,26166,26173,26177,26179,26180,26181,26182,26183,26185,26186,26187,26188,26191,26192,26194,26196,26197,26199,26203,26208,26211,26216,26217,26218,26224,26230,26231,26232,26235,26237,26241,26245,26255,26257,26260,26261,26262,26264,26265,26272,26280,26282,26286,26287,26289,26292,26293,26302,26303,26305,26314,26315,26319,26320,26322,26324,26325,26326,26330,26333,26337,26340,26341,26342,26343,26347,26351,26352,26360,26361,26362,26363,26370,26375,26377,26380,26382,26384,26390,26391,26394,26395,26397,26400,26401,26403,26408,26410,26414,26418,26419,26421,26427,26433,26435,26438,26441,26443,26449,26457,26458,26460,26464,26467,26468,26469,26475,26478,26480,26483,26487,26495,26545,26548,26550,26551,26553,26554,26555,26559,26560,26564,26565,26567,26571,26573,26580,26581,26582,26584,26621,26624,26626,26659,26663,26664,26710,26717,26724,26725,26736,26751,26762,26773,26777,26778,26781,26788,26804,26806,26808,26817,26819,26824,26828,26832,26843,26844,26859,26861,26873,26875,26885,26887,26890,26901,26915,26916,26931,26933,26937,26958,26968,26972,26978,26980,26985,26988,26992,27000,27003,27012,27021,27028,27037,27044,27047,27066,27079,27081,27094,27098,27099,27110,27121,27124,27130,27135,27163,1621991,1622006,1622012,1622023,1622041,1622047,1622067,1622077,1622078,1622082,1622088,1622097,1622098,1622102,1622113,1622117,1622125,1622130,1622131,1622141,1622148,1622149,1622150,1622155,1622156,1622166,1622171,1622174,1622177,1622180,1622181,1622182,1622183,1622186,1622188,1622191,1622192,1622193,1622197,1622198,1622201,1622202,1622204,1622208,1622218,1622222,1622237,1622238,1622244,1622248,1622249,1622251,1622255,1622267,1622270,1622271,1622272,1622273,1622274,1622276,1622277,1622279,1622281,1622292,1622294,1622300,1622303,1622309,1622311,1622314,1622323,1622339,1622345,1622347,1622350,1622351,1622352,1622362,1622363,1622369,1622373,1622377,1622383,1622394,1622399,1622400,1622401,1622402,1622406,1622407,1622412,1622413,1622414,1622419,1622422,1622426,1622428,1622431,1622432,1622436,1622439,1622442,1622445,1622449,1622450,1622453,1622462,1622465,1622466,1622467,1622468,1622474,1622475,1622479,1622481,1622488,1622490,1622491,1622499,1622500,1622501,1622502,1622504,1622505,1622506,1622509,1622511,1622513,1622514,1622515,1622521,1622522,1622523,1622524,1622525,1622531,1622532,1622534,1622543,1622544,1622545,1622550,1622552,1622553,1622554,1622565,1622567,1622568,1622569,1622570,1622578,1622580,1622584,1622585,1622590,1622593,1622594,1622611,1622616,1622617,1622625,1622634,1622635,1622644,1622646,1622652,1622659,1622671,1622673,1622674,1622678,1622682,1622691,1622693,1622695,1622703,1622704,1622705,1622706,1622709,1622725,1622726,1622732,1622733,1622734,1622746,1622777,1622782,1622783,1622796,1622800,1622802,1622812,1622820,1622821,1622826,1622832,1622833,1622844,1622852,1622853,1622854,1622856,1622864,1622868,1622869,1622872,1622876,1622877,1622880,1622895,1622899,1622907,1622908,1622910,1622911,1622912,1622916,1622918,1622924,1622925,1622940,1622947,1622948,1622953,1622958,1622960,1622970,1622971,1622973,1622975,1622976,1622977,1622979,1622982,1622983,1622988,1622993,1622994,1622998,1623000,1623001,1623002,1623005,1623006,1623010,1623011,1623013,1623015,1623019,1623023,1623028,1623035,1623038,1623041,1623048,1623050,1623051,1623053,1623055,1623056,1623058,1623062,1623066,1623068,1623069,1623076,1623086,1623091,1623093,1623101,1623107,1623109,1623111,1623115,1623121,1623129,1623131,1623133,1623136,1623139,1623140,1623141,1623144,1623146,1623151,1623153,1623161,1623162,1623165,1623166,1623178,1623187,1623192,1623193,1623198,1623200,1623204,1623206,1623209,1623211,1623218,1623223,1623228,1623229,1623235,1623236,1623240,1623243,1623245,1623246,1623247,1623251,1623254,1623259,1623266,1623271,1623273,1623274,1623279,1623283,1623284,1623288,1623290,1623294,1623295,1623296,1623297,1623299,1623300,1623303,1623308,1623309,1623310,1623311,1623312,1623313,1623315,1623316,1623317,1623319,1623322,1623326,1623331,1623332,1623334,1623335,1623339,1623340,1623345,1623355,1623362,1623364,1623365,1623366,1623372,1623374,1623376,1623381,1623382,1623383,1623384,1623385,1623387,1623389,1623391,1623392,1623394,1623397,1623400,1623402,1623403,1623418,1623422,1623423,1623424,1623425,1623426,1623427,1623430,1623432,1623433,1623437,1623438,1623450,1623453,1623456,1623457,1623460,1623467,1623468,1623472,1623477,1623479,1623497,1623498,1623500,1623502,1623504,1623516,1623523,1623525,1623529,1623537,1623538,1623541,1623549,1623555,1623561,1623568,1623579,1623584,1623587,1623589,1623591,1623597,1623599,1623600,1623602,1623603,1623608,1623609,1623614,1623615,1623619,1623621,1623623,1623626,1623627,1623633,1623636,1623644,1623647,1623653,1623656,1623659,1623663,1623667,1623670,1623672,1623701,1623706,1623726,1623727,1623733,1623737,1623751,1623756,1623764,1623767,1623773,1623780,1623781,1623798,1623804,1623814,1623823,1623837,1623839,1623848,1623850,1623851,1623853,1623854,1623859,1623860,1623861,1623866,1623868,1623874,1623886,1623893,1623908,1623910,1623912,1623914,1623928,1623931,1623933,1623934,1623935,1623938,1623958,1623962,1623972,1623981,1623996,1624007,1624016,1624021,1624022,1624030,1624031,1624035,1624044,1624053,1624063,1624076,1624090,1624106,1624112,1624116,1624118,1624130,1624131,1624148,1624159,1624167,1624174,1624184,1624189,1624193,1624216,1624222,1624229,1624232,1624235,1624240,1624243,1624245,1624250,1624251,1624256,1624258,1624274,1624277,1624282,1624284,1624295,1624300,1624304,1624319,1624322,1624325,1624334,1624337,1624352,1624355,1624356,1624386,1624404,1624409,1624412,1624420,1624425,1624445,1624447,1624470,1624475,1624479,1624480,1624485,1624497,1624524,1624535,1624561,1624579,1624606,1624607,1624614,1624618,1624621,1624626,1624631,1624634,1624636,1624641,1624643,1624645,1624649,1624650,1624654,1624670,1624671,1624678,1624683,1624684,1624685,1624702,1624706,1624708,1624709,1624711,1624723,1624728,1624744,1624749,1624773,1624778,1624785,1624787,1624792,1624793,1624810,1624813,1624827,1624852,1624853,1624854,1624855,1624857,1624858,1624875,1624881,1624882,1624892,1624897,1624905,1624911,1624921,1624930,1624934,1624937,1624940,1624964,1624970,1624975,1624977,1624980,1624985,1624999,1625004,1625007,1625017,1625020,1625024,1625032,1625035,1625055,1625076,1625080,1625081,1625093,1625096,1625097,1625101,1625112,1625114,1625121,1625138,1625141,1625146,1625171,1625176,1625180,1625181,1625184,1625208,1625217,1625220,1625221,1625233,1625234,1625263,1625297,1625308,1625315,1625327,1625336,1625341,1625343,1625353,1625359,1625364,1625372,1625383,1625393,1625394,1625401,1625411,1625415,1625426,1625427,1625429,1625436,1625441,1625443,1625449,1625454,1625455,1625457,1625484,1625486,1625492,1625505,1625510,1625524,1625542,1625543,1625562,1625578,1625582,1625585,1625624,1625627,1625630,1625648,1625655,1625656,1625658,1625672,1625673,1625674,1625693,1625701,1625711,1625730,1625741,1625742,1625748,1625750,1625751,1625757,1625761,1625767,1625790,1625796,1625810,1625832,1625833,1625836,1625838,1625845,1625846,1625849,1625856,1625859,1625870,1625880,1625883,1625884,1625889,1625893,1625913,1625915,1625929,1625940,1625946,1625954,1625958,1625978,1625980,1625988,1625994,1626023,1626037,1626047,1626048,1626049,1626052,1626063,1626073,1626078,1626080,1626106,1626111,1626113,1626117,1626127,1626129,1626130,1626133,1626136,1626147,1626148,1626149,1626152,1626172,1626175,1626176,1626188,1626189,1626190,1626192,1626205,1626208,1626213,1626228,1626230,1626236,1626254,1626256,1626259,1626263,1626265,1626267,1626275,1626279,1626284,1626286,1626293,1626294,1626308,1626320,1626321,1626323,1626325,1626331,1626342,1626354,1626365,1626367,1626368,1626381,1626392,1626394,1626400,1626405,1626406,1626407,1626408,1626416,1626425,1626432,1626433,1626439,1626440,1626448,1626450,1626458,1626483,1626491,1626508,1626509,1626517,1626518,1626533,1626547,1626557,1626567,1626569,1626571,1626575,1626601,1626604,1626606,1626612,1626614,1626617,1626624,1626636,1626639,1626666,1626669,1626681,1626682,1626686,1626688,1626691,1626692,1626693,1626708,1626716,1626719,1626721,1626725,1626728,1626731,1626741,1626747,1626749,1626756,1626765,1626766,1626785,1626786,1626800,1626802,1626804,1626807,1626811,1626813,1626817,1626832,1626833,1626849,1626850,1626851,1626852,1626854,1626860,1626862,1626872,1626884,1626890,1626891,1626892,1626893,1626894,1626905,1626908,1626910,1626916,1626920,1626927,1626933,1626934,1626936,1626943,1626959,1626973,1626976,1626996,1626997,1627017,1627023,1627024,1627025,1627026,1627029,1627040,1627044,1627054,1627057,1627061,1627062,1627077,1627088,1627100,1627107,1627109,1627110,1627111,1627112,1627116,1627119,1627128,1627139,1627141,1627156,1627167,1627170,1627175,1627183,1627188,1627193,1627195,1627201,1627209,1627210,1627212,1627213,1627216,1627224,1627232,1627233,1627235,1627239,1627248,1627250,1627253,1627255,1627270,1627275,1627286,1627290,1627294,1627296,1627304,1627305,1627308,1627312,1627330,1627331,1627333,1627334,1627341,1627342,1627349,1627352,1627375,1627386,1627389,1627395,1627405,1627406,1627417,1627432,1627445,1627449,1627451,1627457,1627459,1627470,1627471,1627475,1627483,1627484,1627485,1627493,1627495,1627509,1627510,1627511,1627542,1627551,1627557,1627567,1627579,1627583,1627587,1627589,1627594,1627608,1627610,1627612,1627616,1627617,1627619,1627627,1627634,1627643,1627674,1627692,1627694,1627696,1627697,1627702,1627705,1627707,1627708,1627713,1627714,1627715,1627728,1627738,1627739,1627746,1627750,1627751,1627752,1627761,1627765,1627767,1627770,1627782,1627786,1627792,1627793,1627795,1627798,1627801,1627803,1627806,1627813,1627823,1627825,1627837,1627849,1627862,1627864,1627865,1627867,1627868,1627874,1627875,1627888,1627890,1627894,1627897,1627899,1627901,1627903,1627907,1627908,1627923,1627927,1627929,1627931,1627938,1627939,1627943,1627953,1627958,1627963,1627964,1627965,1627968,1627983,1627984,1627987,1627990,1628011,1628016,1628029,1628032,1628036,1628040,1628042,1628043,1628044,1628047,1628050,1628056,1628059,1628060,1628063,1628065,1628070,1628073,1628074,1628075,1628077,1628078,1628079,1628081,1628082,1628083,1628084,1628085,1628087,1628090,1628091,1628092,1628095,1628096,1628097,1628101,1628103,1628105,1628108,1628111,1628113,1628114,1628115,1628117,1628119,1628120,1628121,1628128,1628129,1628130,1628132,1628138,1628139,1628140,1628141,1628142,1628143,1628144,1628145,1628148,1628150,1628151,1628152,1628153,1628155,1628156,1628157,1628160,1628163,1628168,1628169,1628171,1628172,1628173,1628174,1628176,1628178,1628180,1628181,1628182,1628184,1628190,1628191,1628192,1628193,1628194,1628197,1628198,1628200,1628203,1628204,1628205,1628206,1628207,1628208,1628210,1628211,1628212,1628216,1628217,1628218,1628219,1628221,1628222,1628224,1628225,1628227,1628230,1628232,1628236,1628238,1628240,1628241,1628242,1628243,1628245,1628246,1628247,1628248,1628249,1628255,1628256,1628257,1628259,1628260,1628267,1628268,1628271,1628273,1628275,1628277,1628278,1628280,1628281,1628282,1628283,1628284,1628285,1628287,1628289,1628290,1628292,1628294,1628295,1628297,1628298,1628300,1628301,1628302,1628305,1628306,1628310,1628311,1628312,1628314,1628315,1628317,1628318,1628320,1628321,1628322,1628323,1628324,1628326,1628328,1628329,1628330,1628331,1628332,1628334,1628335,1628337,1628340,1628341,1628343,1628344,1628346,1628351,1628355,1628356,1628357,1628358,1628359,1628360,1628361,1628363,1628365,1628368,1628369,1628370,1628371,1628372,1628373,1628374,1628375,1628377,1628378,1628382,1628383,1628384,1628387,1628388,1628389,1628390,1628391,1628393,1628394,1628397,1628399,1628400,1628401,1628402,1628404,1628405,1628406,1628407,1628408,1628411,1628415,1628416,1628418,1628421,1628422,1628423,1628424,1628425,1628426,1628429,1628431,1628433,1628434,1628435,1628437,1628440,1628441,1628442,1628444,1628447,1628449,1628451,1628452,1628453,1628454,1628455,1628460,1628461,1628463,1628464,1628465,1628466,1628468,1628469,1628470,1628471,1628472,1628475,1628477,1628478,1628479,1628480,1628481,1628483,1628484,1628485,1628488,1628489,1628490,1628491,1628492,1628493,1628494,1628495,1628496,1628497,1628498,1628499,1628500,1628501,1628502,1628505,1628506,1628508,1628509,1628511,1628512,1628513,1628514,1628515,1628516,1628517,1628518,1628519,1628521,1628522,1628523,1628524,1628525,1628526,1628528,1628529,1628531,1628532,1628533,1628534,1628535,1628536,1628537,1628538,1628539,1628541,1628542,1628543,1628544,1628545,1628546,1628547,1628549,1628550,1628551,1628552,1628553,1628554,1628555,1628556,1628557,1628559,1628560,1628561,1628562,1628563,1628564,1628565,1628566,1628567,1628569,1628570,1628571,1628572,1628573,1628574,1628575,1628576,1628577,1628578,1628580,1628581,1628582,1628583,1628584,1628585,1628586,1628587,1628588,1628589,1628590,1628591,1628592,1628593,1628594,1628595,1628596,1628598,1628599,1628601,1628602,1628603,1628604,1628605,1628606,1628607,1628608,1628610,1628611,1628612,1628613,1628614,1628615,1628616,1628617,1628618,1628619,1628620,1628621,1628622,1628628,1628630,1628638,1628641,1628642,1628646,1628647,1628648,1628651,1628652,1628653,1628654,1628658,1628662,1628663,1628668,1628674,1628678,1628679,1628681,1628682,1628684,1628685,1628689,1628694,1628695,1628698,1628699,1628700,1628702,1628707,1628708,1628709,1628710,1628712,1628718,1628719,1628721,1628725,1628731,1628737,1628738,1628747,1628767,1628768,1628777,1628782,1628785,1628790,1628793,1628794,1628795,1628800,1628805,1628829,1628836,1628837,1628841,1628846
        };
        if(ids.length==0){
            return;
        }
        StringBuffer json = new StringBuffer();
        int size = ids.length;
        ServicePoint servicePoint;
        Long id;
        List<Long> list = Arrays.stream(ids).map(t->Long.valueOf(t.longValue())).collect(Collectors.toList());
        for(int i=0;i<size;i++){
            id = list.get(i);
            servicePoint = servicePointService.getFromCache(id);
            if(servicePoint==null){
                System.out.println("not exists:" + id.toString());
            }else{
                json.append("ZREMRANGEBYSCORE MD:SERVICEPOINT:ALL ")
                        .append(id.toString()).append(" ")
                        .append(id.toString())
                        .append(System.getProperty("line.separator"));
                json.append("ZADD MD:SERVICEPOINT:ALL ")
                        .append(id.toString()).append(" ")
                        .append("'")
                        .append(servicePointAdapter.toJson(servicePoint))
                        .append("'")
                        .append(System.getProperty("line.separator"));
            }
        }
        System.out.println(">>>redis command:");
        System.out.println(json.toString());
    }

    @Test
    public void testServicepointModel(){
        ServicePointModel model = new ServicePointModel();
        System.out.println("autoPlanFlag:" + model.getAutoPlanFlag());
        System.out.println("getInsuranceFlag:" + model.getInsuranceFlag());
        System.out.println("tetTimeLinessFlag:" + model.getTimeLinessFlag());
        System.out.println("getUseDefaultPrice:" + model.getUseDefaultPrice());
    }

    @Test
    public void testMSReloadServicePointPriceCache(){
        long sid = 1622038l;
        MSResponse<Integer> msResponse = msServicePointPriceService.reloadPointPriceWithCache(sid);
        System.out.println(GsonUtils.getInstance().toGson(msResponse));
    }

    public static void main(String[] args) {
        List<NameValuePair<String,User>> users = Lists.newArrayListWithCapacity(2);
        NameValuePair<String,User> nameValuePair = new NameValuePair<String,User>();
        nameValuePair.setName("key");
        User user = new User(1l);
        user.setName("ryan");
        user.setMobile("13700001111");
        nameValuePair.setValue(user);
        users.add(nameValuePair);

        NameValuePair<String,User> nameValuePair2 = new NameValuePair<String,User>();
        nameValuePair2.setName("key2");
        User user2 = new User(3l);
        user2.setName("ryan2");
        user2.setMobile("13700001121");
        nameValuePair2.setValue(user2);
        users.add(nameValuePair2);

        System.out.println(GsonUtils.getInstance().toGson(users));

        /*
        System.out.println(GsonUtils.getInstance().toGson(nameValuePair));

        System.out.println(nameValuePair.toString());
        */

    }
}
