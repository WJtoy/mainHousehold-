/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.wolfking.jeesite.modules.sys.web;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.wolfking.jeesite.common.config.Global;
import com.wolfking.jeesite.common.config.redis.RedisConstant;
import com.wolfking.jeesite.common.persistence.AjaxJsonEntity;
import com.wolfking.jeesite.common.persistence.Page;
import com.wolfking.jeesite.common.utils.RedisUtils;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.common.web.BaseController;
import com.wolfking.jeesite.modules.sys.entity.Area;
import com.wolfking.jeesite.modules.sys.entity.User;
import com.wolfking.jeesite.modules.sys.service.AreaService;
import com.wolfking.jeesite.modules.sys.utils.AreaUtils;
import com.wolfking.jeesite.modules.sys.utils.UserUtils;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

/**
 * 区域Controller
 * @author ThinkGem
 * @version 2013-5-15
 */
@Controller
@RequestMapping(value = "${adminPath}/sys/area")
public class AreaController extends BaseController {

	@Autowired
	private AreaService areaService;

	@Autowired
	private RedisUtils redisUtils;

	/**
	 * 控制器前置处理
	 * 增加过滤，只有增/删/改时按id查询
	 */
	@ModelAttribute("area")
	public Area get(@RequestParam(required = false) Long id,HttpServletRequest request) {
		if (id != null) {
			String uri =request.getRequestURI();
			//编辑时才从数据库读取
			if(uri.indexOf("/sys/area/form") >= 0 || uri.indexOf("/sys/area/save") >= 0
                    || uri.indexOf("/sys/area/delete") >= 0) {
				return areaService.get(id);
			}else{
				return new Area();
			}
		} else {
			return new Area();
		}
	}

	@RequiresPermissions("sys:area:view")
	@RequestMapping(value = {"list", ""})
	public String list(@RequestParam Map<String, Object> paramMap, HttpServletRequest request, HttpServletResponse response, Model model) {
		model.addAllAttributes(paramMap);
		Page<Area> page = areaService.find(new Page<Area>(request, response), paramMap);
		model.addAttribute("page", page);

		return "modules/sys/areaList";
	}

	@RequiresPermissions("sys:area:view")
	@RequestMapping(value = "form")
	public String form(Area area, Model model) {
		/*
		if (area.getParent()==null||area.getParent().getId()==null){
			area.setParent(UserUtils.getUser().getOffice().getArea());
		}
		if(area.getParent()!=null)
			area.setParent(areaService.get(area.getParent().getId()));
		*/
		//new
		if (area.getId() == null && area.getParent() != null && area.getParent().getId() != null) {
			Area parent = areaService.getFromCache(area.getParent().getId());
			area.setParent(parent);
		}
		model.addAttribute("area", area);
		return "modules/sys/areaForm";
	}

	@RequiresPermissions("sys:area:edit")
	@RequestMapping(value = "save")
	public String save(Area area, Model model, RedirectAttributes redirectAttributes,HttpServletRequest request) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/sys/area";
		}
		if (!beanValidator(model, area)) {
			return form(area, model);
		}

		String strRenew = request.getParameter("renew");

		Area parentArea = area.getParent();
		if (parentArea != null)
		{
			parentArea = areaService.get(area.getParent().getId());
			if (area.getType() > 2) {
				area.setFullName(parentArea.getFullName() + " " + area.getName());
			} else {
				//省直接写省名称
				area.setFullName(area.getName());
			}
		} else {
			area.setFullName(area.getName());
		}

		areaService.save(area);
		addMessage(redirectAttributes, "保存区域'" + area.getName() + "'成功");
		String strParentName = parentArea!= null? parentArea.getName():"";
		try {
			strParentName = URLEncoder.encode(strParentName, "UTF-8");
		} catch(Exception e) {
		}

		if (StringUtils.isNotBlank(strRenew) && strRenew.equalsIgnoreCase("1")) {
			Area renewArea = new Area();
			renewArea.setParent(area.getParent());
			addMessage(model, "保存区域'" + area.getName() + "'成功.");
			return form(renewArea,model);
		} else {
			return "redirect:" + adminPath + "/sys/area/?repage&name=" + strParentName;
		}
	}

	@RequiresPermissions("sys:area:edit")
	@RequestMapping(value = "delete")
	public String delete(Area area, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/sys/area";
		}
//		if (Area.isRoot(id)){
//			addMessage(redirectAttributes, "删除区域失败, 不允许删除顶级区域或编号为空");
//		}else{
		areaService.delete(area);
		addMessage(redirectAttributes, "删除区域成功");
//		}
		return "redirect:" + adminPath + "/sys/area/";
	}

	/**
	 * 返回区域（json格式）
	 *
	 * @param kefu  客服id
	 * @param extId 排除id
	 */
	@RequiresPermissions("user")
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required = false) Long kefu, @RequestParam(required = false) String extId, HttpServletResponse response) {
		List<Map<String, Object>> mapList = Lists.newArrayList();
		List<Area> list;
		if (kefu == null || kefu <= 0) {
			list = areaService.findAll(2);
		} else {
			list = areaService.getFullAreaListOfKefu(kefu);
			if (list == null || list.size() == 0) {
				list = areaService.findAll();
			}
		}
		for (int i = 0; i < list.size(); i++) {
			Area e = list.get(i);
			if (StringUtils.isBlank(extId) || (extId != null && !extId.equals(e.getId()) && e.getParentIds().indexOf("," + extId + ",") == -1)) {
				Map<String, Object> map = Maps.newHashMap();
				map.put("id", e.getId());
				map.put("pId", e.getParentId());
				map.put("pIds", e.getParentIds());
				map.put("name", e.getName());
				map.put("type",e.getType());
				mapList.add(map);
			}
		}
		return mapList;
	}

	@ResponseBody
	@RequestMapping(value = {"clearcache"}, method = RequestMethod.POST)
	public AjaxJsonEntity clearcache(HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		AjaxJsonEntity jsonEntity = new AjaxJsonEntity();
		try {
			Boolean result = UserUtils.loadAreas();
			jsonEntity.setSuccess(result);
//			if (UserUtils.getCache(UserUtils.CACHE_AREA_LIST) != null)
//			{
//				UserUtils.removeCache(UserUtils.CACHE_AREA_LIST);
//			}
		} catch (Exception e) {
			jsonEntity.setSuccess(false);
			jsonEntity.setMessage(e.getMessage().toString());
		}
		return jsonEntity;
	}

	/**
	 * 返回省份列表 For区域联动选择 返回字段:id,pid,name
	 */
	@ResponseBody
	@RequestMapping(value = "service/arealist")
	public List<Area> arealist(@RequestParam(required = false) int type, @RequestParam(required = false) Long id, HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		if (id == null || id == 0) {
			//查询当前type的所有区域
			return areaService.findListByType(2);
		} else {
			//查询当前type,且属于id的下属区域
			return areaService.findListByParent(type, id);
		}
	}

	@ResponseBody
	@RequestMapping(value = "service/arealistbyids")
	public AjaxJsonEntity arealistbyids(String ids, HttpServletResponse response) {
		// 此函数主要用来获取同一父级id下的所有4级区域数据
		response.setContentType("application/json; charset=UTF-8");
		AjaxJsonEntity jsonEntity = new AjaxJsonEntity();
		try{
			if (ids == null || ids.equals("")) {
				throw new Exception("传入id列表为空.");
			}
			String[] idsArr = ids.split(",");
			List<Long> areaParentIds = Lists.newArrayList();
			List<Area> areaList = Lists.newArrayList();
			for (int i = 0; i < idsArr.length; i++) {
				long lareaId = StringUtils.toLong(idsArr[i]);
				if (lareaId < 1) {
					continue;
				}
				Area area = areaService.getFromCache(lareaId);  // 从缓存中获取4级(乡镇)的数据
				if (area.getType().equals(Area.TYPE_VALUE_TOWN)) {
					Long parentId = area.getParentId();  // 获取父级id
					long idsCount = areaParentIds.stream().filter(r->r.longValue() == parentId).count();  // 检查父级列表中是否已包含此id
					if (idsCount < 1) {
						// 若没有找到则从缓存中获取数据
						areaList.addAll(areaService.findListByParent(Area.TYPE_VALUE_TOWN, parentId));
						areaParentIds.add(parentId);
					}
				}
			}
			jsonEntity.setSuccess(true);
			jsonEntity.setData(areaList);
		}
		catch (Exception ex) {
			jsonEntity.setSuccess(false);
			jsonEntity.setMessage(ex.getMessage().toString());
		}
		return jsonEntity;
	}


//	@RequestMapping(value = "coverlist")
//	public String getCoverAreaList(@RequestParam Map<String, Object> paramMap, Model model) {
//
//		List<ServicePointCoverProvinceRptEntity> provinceRptEntityList = areaService.getServicePointCoverAreasRptData();
//		model.addAttribute("list", provinceRptEntityList);
//		model.addAllAttributes(paramMap);
//		return "modules/sys/frontEngineerArea";
//	}

//	@RequestMapping(value = "coverlist_export")
//	public String getCoverAreaListReport(HttpServletResponse response, RedirectAttributes redirectAttributes) {
//
//		List<ServicePointCoverProvinceRptEntity> provinceRptEntityList = areaService.getServicePointCoverAreasRptData();
////		model.addAttribute("list", provinceRptEntityList);
////		model.addAllAttributes(paramMap);
//		SXSSFWorkbook xBook = null;
//		try{
//			String xName = "网点覆盖表";
//			ExportExcel exportExcel = new ExportExcel();
//			xBook = new SXSSFWorkbook(2000);
//			SXSSFSheet xSheet = xBook.createSheet(xName);
//			xSheet.setDefaultColumnWidth(10);
//			Map<String, CellStyle> xStyle = exportExcel.createStyles(xBook);
//			int rowIndex = 0;
//			//=====================绘制标题行==================================
//			SXSSFRow titleRow = xSheet.createRow(rowIndex++);
//			titleRow.setHeightInPoints(30);
//			ExportExcel.createCell(titleRow,0, xStyle, ExportExcel.CELL_STYLE_NAME_TITLE, xName);
//			xSheet.addMergedRegion(new CellRangeAddress(titleRow.getRowNum(), titleRow.getRowNum(), 0, 2));
//			//====================================================绘制表头============================================================
//			//表头第一行
//			Row headerFirstRow = xSheet.createRow(rowIndex++);
//			headerFirstRow.setHeightInPoints(20);
//
//			ExportExcel.createCell(headerFirstRow,0, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "省");
//			xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum()+1, 0, 0));
//
//			ExportExcel.createCell(headerFirstRow,1, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "市");
//			xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum()+1, 1, 1));
//
//			ExportExcel.createCell(headerFirstRow,2, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "区(县)");
//			//xSheet.setColumnWidth(2,100*256);
//			xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum()+1, 2, 2));
//
//			ExportExcel.createCell(headerFirstRow,3, xStyle, ExportExcel.CELL_STYLE_NAME_HEADER, "街道");
//			xSheet.setColumnWidth(3,100*356);
//			xSheet.addMergedRegion(new CellRangeAddress(headerFirstRow.getRowNum(), headerFirstRow.getRowNum()+1, 3, 3));
//
//			xSheet.createFreezePane(0, rowIndex); // 冻结单元格(x, y)
//			//=========绘制表格数据===================
//			if (provinceRptEntityList!=null){
//                rowIndex++;
//                for (ServicePointCoverProvinceRptEntity entity:provinceRptEntityList) {
////					OrderDetailRptEntity orderMaster = orderMasterList.get(i);
//                    int rowSpan = entity.getMaxRow() -1 ;
//                    List<ServicePointCoverCityRptEntity> cityList = entity.getCityList();
//                    Row dataRow = xSheet.createRow(rowIndex++);
//                    dataRow.setHeightInPoints(20);
//                    ExportExcel.createCell(dataRow,0, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getProvinceName());
//
//                /*    if (cityList!=null&&cityList.size()>0){
//                        ServicePointCoverCityRptEntity cityRptEntity = cityList.get(0);
//                        ExportExcel.createCell(dataRow,1, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, cityRptEntity.getCityName());
//                        ExportExcel.createCell(dataRow,2, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, cityRptEntity.getCountyListString());
//                    }
//                    if (cityList!=null&&cityList.size()>0) {
//                        for (int i = 1; i < cityList.size(); i++) {
//                            dataRow = xSheet.createRow(rowIndex++);
//                            ExportExcel.createCell(dataRow, 0, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getProvinceName());
//                            ServicePointCoverCityRptEntity cityRptEntity = cityList.get(i);
//                            ExportExcel.createCell(dataRow,1, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, cityRptEntity.getCityName());
//                            ExportExcel.createCell(dataRow,2, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, cityRptEntity.getCountyListString());
//                        }
//                    }*/
//					if (cityList!=null&&cityList.size()>0){
//						ServicePointCoverCityRptEntity cityRptEntity = cityList.get(0);
//						ExportExcel.createCell(dataRow,1, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, cityRptEntity.getCityName());
//						ServicePointCoverCountyRptEntity townRptEntity = cityRptEntity.getCountyList().get(0);
//						ExportExcel.createCell(dataRow,2, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, townRptEntity.getCountyName());
//						ExportExcel.createCell(dataRow,3, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, townRptEntity.getCountyListString());
//						if(cityRptEntity.getCountyList() !=null && cityRptEntity.getCountyList().size()>0){
//							for(int i=1;i<cityRptEntity.getCountyList().size();i++){
//								dataRow = xSheet.createRow(rowIndex++);
//								ServicePointCoverCountyRptEntity town = cityRptEntity.getCountyList().get(i);
//								ExportExcel.createCell(dataRow,0, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getProvinceName());
//								ExportExcel.createCell(dataRow,1, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, cityRptEntity.getCityName());
//								ExportExcel.createCell(dataRow,2, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, town.getCountyName());
//								ExportExcel.createCell(dataRow,3, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, town.getCountyListString());
//							}
//						}
//						for(int j=1;j< cityList.size();j++){
//							ServicePointCoverCityRptEntity  city = cityList.get(j);
//							List<ServicePointCoverCountyRptEntity> countyList =city.getCountyList();
//							if(countyList !=null && countyList.size()>0){
//								for(int i = 0; i < countyList.size(); i++){
//									dataRow = xSheet.createRow(rowIndex++);
//									ExportExcel.createCell(dataRow, 0, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, entity.getProvinceName());
//									ExportExcel.createCell(dataRow,1, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, city.getCityName());
//									ServicePointCoverCountyRptEntity countyRptEntity = countyList.get(i);
//									ExportExcel.createCell(dataRow,2, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, countyRptEntity.getCountyName());
//									ExportExcel.createCell(dataRow,3, xStyle, ExportExcel.CELL_STYLE_NAME_DATA, countyRptEntity.getCountyListString());
//								}
//							}
//						}
//					}
//
//                }
//			}
//            response.reset();
//            response.setContentType("application/octet-stream; charset=utf-8");
//            response.setHeader("Content-Disposition", "attachment; filename="+ Encodes.urlEncode(xName + ".xlsx"));
//            OutputStream outputStream = response.getOutputStream();
//            xBook.write(outputStream);
////			outputStream.flush();
////			outputStream.close();
//            xBook.dispose();
////			logger.error(String.format("********************************%d****************************", System.currentTimeMillis()));
//            return null;
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            addMessage(redirectAttributes, "网点覆盖表！失败信息：" + e.getMessage());
//            return "redirect:"+ Global.getAdminPath()+"/sys/area/coverlist_export";
//        }
//        finally {
//            if (xBook != null) {
//                xBook.dispose();
//            }
//        }
//	}
	@ResponseBody
	@RequestMapping(value = {"da"}, method = RequestMethod.POST)
	public AjaxJsonEntity decodeAddressGaode(@RequestParam("fullAddress") String fullAddress, HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		AjaxJsonEntity jsonEntity = new AjaxJsonEntity();
		try {
			fullAddress = fullAddress.replaceAll("&nbsp;", "").replaceAll("&lt;","")
					.replaceAll("&gt;", "").replaceAll("&amp;","")
					.replaceAll("&quot;", "").replaceAll("&mdash;","");
			jsonEntity.setSuccess(false);
			String returnStr = "";
			StringBuffer sb = new StringBuffer("https://restapi.amap.com/v3/geocode/geo?key=37b238e75a3097696daf4a81498f1399&address=");
			sb.append(fullAddress.replaceAll(" ", "").replaceAll("#", "")
					.replaceAll("　", "").replaceAll("\\|", "")
					.replaceAll(",", "").replaceAll("\r","")
					.replaceAll("\n","").replaceAll("\t",""));
			URL url = new URL(sb.toString());
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Accept", "application/json");
			connection.setRequestProperty("Host", "restapi.amap.com");
			if (200 == connection.getResponseCode()) {
				//得到输入流
				InputStream is = connection.getInputStream();
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				byte[] buffer = new byte[1024];
				int len;
				while (-1 != (len = is.read(buffer))) {
					baos.write(buffer, 0, len);
					baos.flush();
				}
				returnStr = baos.toString("utf-8");
				baos.close();
				is.close();
				connection.disconnect();
				if (returnStr != null && returnStr.length() > 0) {
					JSONObject jsonObj = JSONObject.fromObject(returnStr);
					if (jsonObj.get("info").toString().toUpperCase().equals("OK")) {
						JSONArray jsonArray = (JSONArray) jsonObj.get("geocodes");
						if (jsonArray != null && jsonArray.size() > 0) {
							JSONObject jsonObject = jsonArray.getJSONObject(0);
							String province = jsonObject.get("province").toString();
							String city = jsonObject.get("city").toString();
							String district = jsonObject.get("district").toString();
							if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("2:1:%s", province.substring(0, 2)))) {
								Long provinceId = (Long) redisUtils.get(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("2:1:%s", province.substring(0, 2)), Long.class);
								if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("3:%d:%s", provinceId, city))) {
									Long cityId = (Long) redisUtils.get(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("3:%d:%s", provinceId, city), Long.class);
									if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("4:%d:%s", cityId, district))) {
										String districtString = (String) redisUtils.getString(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("4:%d:%s", cityId, district), String.class);
										String[] districtStrings = districtString.split("=");
										String detailAddress = fullAddress;
										//at 2019/04/10 数组容量由6->8,新增 6:longitude/经度 7:latitude/维度
										String[] returnString = new String[8];
										returnString[3] = "0";
										returnString[4] = StringUtils.getCellphone(fullAddress);
										returnString[5] = "";
										if (returnString[4].length() > 0){
											returnString[5] = StringUtils.getChineseName(fullAddress.replaceAll("姓名","")
													.replaceAll("收货人","").replaceAll("联系人","")
													.replaceAll("收件人",""));
										}
										if (fullAddress.indexOf(district) > 0) {
											detailAddress = fullAddress.substring(fullAddress.indexOf(district) + district.length()).trim();
											returnString[3] = "1";
										}
										returnString[0] = districtStrings[0];
										returnString[1] = districtStrings[1];
										returnString[2] = detailAddress;
										//经纬度
										String location = jsonObject.getString("location");
										if(StringUtils.isNotBlank(location)){
											String[] locations =  StringUtils.split(location,",");
											if(locations.length == 2){
												returnString[6] = locations[0];
												returnString[7] = locations[1];
											}
										}
										jsonEntity.setData(returnString);
										jsonEntity.setSuccess(true);
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			jsonEntity.setSuccess(false);
			jsonEntity.setMessage(e.getMessage().toString());
		}
		return jsonEntity;
	}


	@ResponseBody
	@RequestMapping(value = {"new_da"}, method = RequestMethod.POST)
	public AjaxJsonEntity newDecodeAddressGaode(@RequestParam("fullAddress") String fullAddress, HttpServletResponse response) {
		/**
		 * 解析省市区街道
		 */
		response.setContentType("application/json; charset=UTF-8");
		AjaxJsonEntity jsonEntity = new AjaxJsonEntity();
		try {
			String[] decodeAddressGaode = AreaUtils.decodeAddressGaode(fullAddress);
			if (!ObjectUtils.isEmpty(decodeAddressGaode)) {
				//Arrays.stream(decodeAddressGaode).forEach(System.out::println);
			}
			jsonEntity.setData(decodeAddressGaode);
			jsonEntity.setSuccess(true);
		} catch (Exception e) {
			jsonEntity.setSuccess(false);
			jsonEntity.setMessage(e.getMessage().toString());
		}
		return jsonEntity;
	}

	@ResponseBody
	@RequestMapping(value = "service/area/{id}")
	public AjaxJsonEntity arealist(@PathVariable Long id, HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		AjaxJsonEntity result = new AjaxJsonEntity();
		User user = UserUtils.getUser();
		if (user == null || user.getId() == null) {
			result.setSuccess(false);
			result.setMessage("登录超时，请重新登录。");
			return result;
		}
		try {
			Area area = areaService.getFromCache(id);
			result.setSuccess(true);
			result.setData(area);
		} catch(Exception ex) {
			result.setSuccess(false);
			result.setMessage(ex.getMessage().toString());
		}
		return result;
	}

	/*
	public AjaxJsonEntity decodeAddressBaidu(@RequestParam("fullAddress") String fullAddress, HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		AjaxJsonEntity jsonEntity = new AjaxJsonEntity();
		try {
			jsonEntity.setSuccess(false);
			String returnStr = "";
			StringBuffer sb = new StringBuffer("https://api.map.baidu.com/cloudgc/v1?geotable_id=179606&ak=FA07b5493a73dd428592a4c385199c44&address=");
			sb.append(fullAddress.replace("#", "").replace(",", "").replace(" ", ""));
			URL url = new URL(sb.toString());
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Accept", "application/json");
			connection.setRequestProperty("Host", "api.map.baidu.com");
			if (200 == connection.getResponseCode()) {
				//得到输入流
				InputStream is = connection.getInputStream();
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				byte[] buffer = new byte[1024];
				int len;
				while (-1 != (len = is.read(buffer))) {
					baos.write(buffer, 0, len);
					baos.flush();
				}
				returnStr = baos.toString("utf-8");
				if (returnStr != null && returnStr.length() > 0) {
					JSONObject jsonObj = JSONObject.fromObject(returnStr);
					if (Integer.valueOf(jsonObj.get("status").toString()) == 0) {
						JSONArray jsonArray = (JSONArray) jsonObj.get("result");
						if (jsonArray != null && jsonArray.size() > 0) {
							JSONObject jsonObject = jsonArray.getJSONObject(0).getJSONObject("address_components");
							String province = jsonObject.get("province").toString();
							String city = jsonObject.get("city").toString();
							String district = jsonObject.get("district").toString();
							if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("2:1:%s", province.substring(0, 2)))) {
								Long provinceId = (Long) redisUtils.get(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("2:1:%s", province.substring(0, 2)), Long.class);
								if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("3:%d:%s", provinceId, city))) {
									Long cityId = (Long) redisUtils.get(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("3:%d:%s", provinceId, city), Long.class);
									if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("4:%d:%s", cityId, district))) {
										String districtString = (String) redisUtils.getString(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("4:%d:%s", cityId, district), String.class);
										String[] districtStrings = districtString.split("=");
										String detailAddress = fullAddress;
										if (fullAddress.indexOf(district) > 0) {
											detailAddress = fullAddress.substring(fullAddress.indexOf(district) + district.length()).trim();
										}
										String[] returnString = new String[3];
										returnString[0] = districtStrings[0];
										returnString[1] = districtStrings[1];
										returnString[2] = detailAddress;
										jsonEntity.setData(returnString);
										jsonEntity.setSuccess(true);
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			jsonEntity.setSuccess(false);
			jsonEntity.setMessage(e.getMessage().toString());
		}
		return jsonEntity;
	}
	*/
}