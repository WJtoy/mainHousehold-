/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.wolfking.jeesite.modules.sys.service;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.wolfking.jeesite.common.config.redis.RedisConstant;
import com.wolfking.jeesite.common.persistence.Page;
import com.wolfking.jeesite.common.service.LongIDTreeService;
import com.wolfking.jeesite.common.utils.RedisUtils;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.modules.sys.dao.AreaDao;
import com.wolfking.jeesite.modules.sys.entity.Area;
import com.wolfking.jeesite.modules.sys.entity.Dict;
import com.wolfking.jeesite.modules.sys.utils.UserUtils;
import com.wolfking.jeesite.ms.providermd.service.MSServicePointAreaService;
import com.wolfking.jeesite.ms.providermd.service.MSServicePointStationService;
import com.wolfking.jeesite.ms.utils.MSDictUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.nio.charset.StandardCharsets;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * 区域Service
 *
 * @author ThinkGem
 * @version 2014-05-16
 */
@Service
@Transactional(propagation = Propagation.NOT_SUPPORTED)
public class AreaService extends LongIDTreeService<AreaDao, Area> {
    @Autowired
    private MSServicePointAreaService msServicePointAreaService;

    @Autowired
    private MSServicePointStationService msServicePointStationService;

    /*
    @Autowired
    private AreaDao areaDao;
    */
    @Autowired
    private RedisUtils redisUtils;
    @SuppressWarnings("rawtypes")
    @Autowired
    public RedisTemplate redisTemplate;


    public List<Area> findAll() {
        return findAll(1);
    }

    /**
     * 读取区域
     *
     * @param fromType 开始区域层级
     * @return
     */
    public List<Area> findAll(Integer fromType) {
        List<Area> list = UserUtils.getAreaList();
        if (fromType == null) {
            return list;
        } else {
            return list.stream().filter(t -> t.getType() >= fromType)
                    .sorted(Comparator.comparingInt(Area::getSort)).collect(Collectors.toList());
        }
    }

    /**
     * 读取指定层级区域
     *
     * @param type 区域层级
     * @return
     */
    public List<Area> findAllByType(Integer type) {
        List<Area> list = UserUtils.getAreaList();
        if (type == null) {
            return list;
        } else {
            return list.stream().filter(t -> t.getType() == type)
                    .sorted(Comparator.comparingInt(Area::getSort)).collect(Collectors.toList());
        }
    }

    /**
     * 获取区，市及省区域名称(用于B2BServicePoint中获取网点信息) // add on 2019-9-20
     * @param id
     * @return
     */
    public Area getTripleAreaById(Long id) {
        // return dao.getTripleAreaById(id);
        Area area = getFromCache(id);
        if (area != null) {
            Area  grandArea = getFromCache(area.getParent().getId());
            if (grandArea != null){
                area.getParent().setParent(grandArea.getParent());
                return area;
            }
        }
        return dao.getTripleAreaById(id);
    }

    /**
     * 通过省,市获取区/县的区域数据(为去除网点查询报表所写) // add on 2019-9-26
     * @param paramMap
     * @return
     */
    public List<Area> findProvinceCityCountyList(Map<String, Object> paramMap) {
        List<Area> areaList = dao.findProvinceCityCountyList(paramMap);
        return areaList;
    }


    public Area getFromCache(Long id) {
        if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, "area:type:all")) {
            Area area = (Area) redisUtils.zRangeOneByScore(RedisConstant.RedisDBType.REDIS_SYS_DB, "area:type:all", id, id, Area.class);
            if (area != null) {
                return area;
            }
        }
        //return areaDao.get(id);
        return dao.get(id);
    }

    public Area getFromCache(Long id, int type) {
        String key = String.format(RedisConstant.SYS_AREA_TYPE, type);
        if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, key)) {
            Area area = (Area) redisUtils.zRangeOneByScore(RedisConstant.RedisDBType.REDIS_SYS_DB, key, id, id, Area.class);
            if (area != null) {
                return area;
            }
        }
//        return areaDao.get(id);
        return dao.get(id);
    }

    public Area getTownFromCache(Long areaId, Long townId) {
        String key = String.format(RedisConstant.SYS_AREA_TYPE_TOWN, areaId);
        if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, key)) {
            Area area = (Area) redisUtils.zRangeOneByScore(RedisConstant.RedisDBType.REDIS_SYS_DB, key, townId, townId, Area.class);
            if (area != null) {
                return area;
            }
        }
        return dao.get(townId);
    }

    public List<Area> getSelfAndParents(Long id) {
        List<Area> list = Lists.newArrayList();
        Area area = getFromCache(id);
        if (area == null) {
            return list;
        }
        list.add(area);
        Area city = getFromCache(area.getParentId());
        if (city == null) {
            return list;
        }
        list.add(city);
        Area province = getFromCache(city.getParentId());
        if (province == null) {
            return list;
        }
        list.add(province);
        return list;
    }

    /**
     * 根据id获得其所有父区域,包含自己
     * 读取:area.getParent().getParent()
     * @param id 区域id
     */
    public Area getSelfAndParentList(Long id,Long parentId,int areaType) {
        Area subArea = null;
        //街道
        if(areaType == Area.TYPE_VALUE_TOWN){
            subArea = getTownFromCache(parentId,id);
            if(subArea == null){
                return subArea;
            }
        }

        //area
        Area area = getFromCache(areaType == Area.TYPE_VALUE_TOWN?parentId:id);
        if (area == null) {
            return subArea;
        }
        if(areaType == Area.TYPE_VALUE_TOWN) {
            subArea.setParent(area);
        }
        //city
        Area parent = null;
        if(area.getParentId() > 0){
            parent = getFromCache(area.getParentId());
            if (parent == null) {
                return area;
            }
            area.setParent(parent);
        }
        //province
        if(parent != null && parent.getParentId() > 0){
            Area preParent = getFromCache(parent.getParentId());
            if (preParent == null) {
                return area;
            }
            parent.setParent(preParent);
        }
        return areaType == Area.TYPE_VALUE_TOWN ? subArea : area;
    }

    /**
     * 根据区县id获得其所有父区域,包含自己
     * Map<区域类型,区域>
     * @param id 区/县 id
     */
    public Map<Integer,Area> getAllParentsWithDistrict(Long id) {
        Map<Integer,Area> map = Maps.newHashMapWithExpectedSize(5);
        Area area = getFromCache(id);
        if (area == null) {
            return map;
        }
        map.put(area.getType(),area);
        Area city = getFromCache(area.getParentId());
        if (city == null) {
            return map;
        }
        map.put(city.getType(),city);
        Area province = getFromCache(city.getParentId());
        if (province == null) {
            return map;
        }
        map.put(province.getType(),province);
        return map;
    }

    /**
     * 获取客户管辖的区域（所有阶层）
     *
     * @param id 客服id
     */
    public List<Area> getFullAreaListOfKefu(Long id) {
        List<Area> areas = getAreaListOfKefu(id);
        if (areas == null) {
            return Lists.newArrayList();
        } else if (areas.size() == 0) {
            return areas;
        }
        //包含所有阶层
        if (areas.stream().filter(t -> t.getType() < 4).count() > 0) {
            return areas;
        }
        //从下网上取
//		Set<Long> pids = Sets.newHashSet();
        List<Area> parents = findAll();
        if (parents == null || parents.size() == 0) {
            return areas;
        }

        for (int i = 4; i > 1; i--) {
            int type = i;
            Set<Long> pids = areas.stream().filter(t -> t.getType() == type).map(t -> t.getParent().getId()).distinct().collect(Collectors.toSet());
            parents.stream().filter(t -> pids.contains(t.getId())).forEach(t -> {
                areas.add(t);
            });
        }
        return areas;
    }

    /**
     * 获取客户管辖的区域(数据库中列表)
     *
     * @param id 客服id
     */
    public List<Area> getAreaListOfKefu(Long id) {
        String key = String.format(RedisConstant.SHIRO_KEFU_AREA, id);
        return redisUtils.getList(RedisConstant.RedisDBType.REDIS_CONSTANTS_DB, key, Area[].class);
    }

    public Page<Area> find(Page<Area> page, Map<String, Object> paramMap) {
        Area area = new Area();
        String type = ObjectUtils.toString(paramMap.get("type"));
        if (StringUtils.isNotEmpty(type)) {
            area.setType(Integer.valueOf(type));
        } else {
            area.setType(0);
        }
        String name = ObjectUtils.toString(paramMap.get("name"));
        if (StringUtils.isNotEmpty(name)) {
            area.setName(name);
        } else {
            area.setName("");
        }
        Area parent = new Area();
        String parentName = ObjectUtils.toString(paramMap.get("parentName"));
        if (StringUtils.isNotEmpty(parentName)) {
            parent.setName(parentName);
        } else {
            parent.setName("");
        }
        area.setParent(parent);

        // 生成数据权限过滤条件（dsf为dataScopeFilter的简写，在xml中使用 ${sqlMap.dsf}调用权限SQL）
        area.getSqlMap().put("dsf", dataScopeFilter(area.getCurrentUser(), "o", "a"));
        // 设置分页参数
        area.setPage(page);
        // 执行分页查询
        //page.setList(areaDao.findList(area));

        //List<Area> areaList = areaDao.findSpecList(area);
        List<Area> areaList = dao.findSpecList(area);
        //切换为微服务
        Map<String, Dict> areaTypeMap = MSDictUtils.getDictMap("sys_area_type");
        for (Area item : areaList) {
            if (item.getType() != null && item.getType() > 0) {
                Dict areaTypeDict = areaTypeMap.get(item.getType().toString());
                item.setTypeName(areaTypeDict != null ? areaTypeDict.getLabel() : "");
            }
        }

        page.setList(areaList);
        return page;
    }

    /**
     * 按区域类型返回所有区域清单
     *
     * @param type
     * @return
     */
    public List<Area> findListByType(Integer type) {
        String key = new String(String.format(RedisConstant.SYS_AREA_TYPE, type));
//		String key = "area:type:"+type;
        if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, key)) {
            return redisUtils.zRange(RedisConstant.RedisDBType.REDIS_SYS_DB, key, 0, -1, Area.class);
            //return sets.stream().collect(Collectors.toList());
        } else {
            List<Area> list = dao.findListByType(type);
            if (list != null && list.size() > 0) {
                int counter = list.size();
                Area area;
                for (int i = 0; i < counter; i++) {
                    area = list.get(i);
                    redisUtils.zAdd(RedisConstant.RedisDBType.REDIS_SYS_DB, key, area, area.getId(), 0);
                }
            }
            return list;
        }
    }

    /**
     * 按区域类型返回所有区域Map<id,area>
     * @param type
     * @return
     */
    public Map<Long,Area> findMapByType(Integer type){
        List<Area> areas = findListByType(type);
        if(areas == null || areas.size() == 0){
            return Maps.newHashMap();
        }
        return areas.stream().collect(Collectors.toMap(
           e->e.getId(),
           e->e
        ));
    }

    /**
     * 按区域返回下属区域
     *
     * @param type
     * @param pid
     * @return
     */
    public List<Area> findListByParent(Integer type, Long pid) {
//		String key = "area:type:"+type;
        if (!type.equals(Area.TYPE_VALUE_TOWN)) {
            String key = new String(String.format(RedisConstant.SYS_AREA_TYPE, type));
            if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, key)) {
                List<Area> list = redisUtils.zRange(RedisConstant.RedisDBType.REDIS_SYS_DB, key, 0, -1, Area.class);
                return list.stream().filter(t -> t.getParent().getId().longValue() == pid.longValue()).collect(Collectors.toList());
            } else {
                List<Area> list = dao.findListByType(type);
                if (list != null && list.size() > 0) {
                    int counter = list.size();
                    Area area;
                    for (int i = 0; i < counter; i++) {
                        area = list.get(i);
                        redisUtils.zAdd(RedisConstant.RedisDBType.REDIS_SYS_DB, key, area, area.getId(), 0);
                    }
                }
                return list.stream().filter(t -> t.getParent().getId().longValue() == pid.longValue()).collect(Collectors.toList());
            }
        } else {
            String key = new String(String.format(RedisConstant.SYS_AREA_TYPE_TOWN, pid));
            if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, key)) {
                List<Area> list = redisUtils.zRange(RedisConstant.RedisDBType.REDIS_SYS_DB, key, 0, -1, Area.class);
                return list;
            } else {
                List<Area> list = Lists.newArrayList();
                return list;
            }
        }
    }

    @Transactional(readOnly = false)
    public void save(Area area) {
        boolean isNew = area.getIsNewRecord();
        Area oldArea = null;
        if (!isNew) {
            oldArea = getFromCache(area.getId());
        }
        saveArea(area);
        /*
        boolean isNew = area.getIsNewRecord();
        Area oldArea;  // add on 2019-6-5
        super.save(area);
        String key = "";
        if (area.getType().equals(Area.TYPE_VALUE_TOWN)) {
            key = new String(String.format(RedisConstant.SYS_AREA_TYPE_TOWN, area.getParent().getId()));
        } else {
            key = new String(String.format(RedisConstant.SYS_AREA_TYPE, area.getType()));
        }
        if (!isNew) {
            oldArea = getFromCache(area.getId());  // mark on 2019-6-5
            if (oldArea != null) {
                if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", oldArea.getType(), oldArea.getParent().getId(), oldArea.getType() == 2 ? oldArea.getName().substring(0, 2) : oldArea.getName()))) {
                    redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", oldArea.getType(), oldArea.getParent().getId(), oldArea.getType() == 2 ? oldArea.getName().substring(0, 2) : oldArea.getName()));
                }
            }
            redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, key, area, area.getId(), 0l);
            //redisUtils.zRemRangeByScore(RedisConstant.RedisDBType.REDIS_SYS_DB,key,area.getId(),area.getId());
            //redisUtils.zAdd(RedisConstant.RedisDBType.REDIS_SYS_DB,key,area,area.getId(),0);
            //redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_DB,String.format(RedisConstant.SYS_AREA_TYPE,"all"));
            if (!area.getType().equals(Area.TYPE_VALUE_TOWN) ) {  //add on 2019-5-22 //增加此条件的目的是使4级区域(乡镇/街道)不写入到all中
                redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"), area, area.getId(), 0l);
            }
        } else {
            redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, key, area, area.getId(), 0l);
            if (!area.getType().equals(Area.TYPE_VALUE_TOWN) ) {  //add on 2019-5-22 //增加此条件的目的是使4级区域(乡镇/街道)不写入到all中
                if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"))) {
                    redisUtils.zAdd(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"), area, area.getId(), 0);
                } else {
                    redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"), area, area.getId(), 0l);
                }
            }
        }
        if (area.getType().equals(4) || area.getType().equals(Area.TYPE_VALUE_TOWN)) {
            redisTemplate.executePipelined((RedisCallback<Object>) connection -> {
                connection.select(RedisConstant.RedisDBType.REDIS_SYS_AREA.ordinal());
                connection.set(String.format("%d:%d:%s", area.getType(), area.getParent().getId(), area.getName()).getBytes(StandardCharsets.UTF_8), String.format("%d=%s", area.getId(), area.getFullName()).getBytes(StandardCharsets.UTF_8));
                return null;
            });
        } else {
            redisUtils.set(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", area.getType(), area.getParent().getId(), area.getType() == 2 ? area.getName().substring(0, 2) : area.getName()), area.getId(), 0l);
        }
        */
        // add on 2019-6-5 begin
        if (oldArea != null) {
            String strOldName = oldArea.getName();
            String strNewName = area.getName();

            if (!strNewName.equalsIgnoreCase(strOldName)) {
                // 修改其下属区域的全称
                String strParentIds = oldArea.getParentIds().concat(oldArea.getId()+",");
                Area tempArea = new Area();
                tempArea.setParentIds(strParentIds);
                List<Area> areaList = dao.findByParentIdsLike(tempArea);
                if (!org.springframework.util.ObjectUtils.isEmpty(areaList)) {
                    //System.out.println("=================Update Area Full Name==================");
                    areaList.stream().forEach(r->{
                        Area  cacheArea = getFromCache(r.getId());
                        String strOldFullName = cacheArea.getFullName();
                        strOldFullName = strOldFullName.replace(strOldName,strNewName);
                        //System.out.println(String.format("Area:%s,old-FullName:%s,new-FullName:%s",cacheArea,cacheArea.getFullName(),strOldFullName));
                        cacheArea.setFullName(strOldFullName);
                        saveArea(cacheArea);
                    });
                }
            }
        }
        // add on 2019-6-5 end
    }

    /**
     * 查找所有下级区域数据  //add on 2019-9-30
     * (此方法初衷主要为网点付款报表用)
     * @param parentIds
     * @return
     */
    public List<Area> findByParentIdsLike(String parentIds) {
        Area area = new Area();
        area.setParentIds(parentIds);
        return dao.findByParentIdsLike(area);
    }

    private void saveArea(Area area) {
        boolean isNew = area.getIsNewRecord();
        Area oldArea;
        super.save(area);
        String key = "";
        if (area.getType().equals(Area.TYPE_VALUE_TOWN)) {
            key = new String(String.format(RedisConstant.SYS_AREA_TYPE_TOWN, area.getParent().getId()));
        } else {
            key = new String(String.format(RedisConstant.SYS_AREA_TYPE, area.getType()));
        }
        if (!isNew) {
            oldArea = getFromCache(area.getId());  // mark on 2019-6-5
            if (oldArea != null) {
                if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", oldArea.getType(), oldArea.getParent().getId(), oldArea.getType() == 2 ? oldArea.getName().substring(0, 2) : oldArea.getName()))) {
                    redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", oldArea.getType(), oldArea.getParent().getId(), oldArea.getType() == 2 ? oldArea.getName().substring(0, 2) : oldArea.getName()));
                }
            }
            redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, key, area, area.getId(), 0l);
            if (!area.getType().equals(Area.TYPE_VALUE_TOWN) ) {  //add on 2019-5-22 //增加此条件的目的是使4级区域(乡镇/街道)不写入到all中
                redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"), area, area.getId(), 0l);
            }
        } else {
            redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, key, area, area.getId(), 0l);
            if (!area.getType().equals(Area.TYPE_VALUE_TOWN) ) {  //add on 2019-5-22 //增加此条件的目的是使4级区域(乡镇/街道)不写入到all中
                if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"))) {
                    redisUtils.zAdd(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"), area, area.getId(), 0);
                } else {
                    redisUtils.zSetEX(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"), area, area.getId(), 0l);
                }
            }
        }
        if (area.getType().equals(4) || area.getType().equals(Area.TYPE_VALUE_TOWN)) {
            redisTemplate.executePipelined((RedisCallback<Object>) connection -> {
                connection.select(RedisConstant.RedisDBType.REDIS_SYS_AREA.ordinal());
                connection.set(String.format("%d:%d:%s", area.getType(), area.getParent().getId(), area.getName()).getBytes(StandardCharsets.UTF_8), String.format("%d=%s", area.getId(), area.getFullName()).getBytes(StandardCharsets.UTF_8));
                return null;
            });
        } else {
            redisUtils.set(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", area.getType(), area.getParent().getId(), area.getType() == 2 ? area.getName().substring(0, 2) : area.getName()), area.getId(), 0l);
        }
    }

    @Transactional(readOnly = false)
    public void delete(Area area) {
        super.delete(area);
        if (area.getType().equals(Area.TYPE_VALUE_TOWN)) {
            String strKey = String.format(RedisConstant.SYS_AREA_TYPE_TOWN, area.getParent().getId());
            redisUtils.zRemRangeByScore(RedisConstant.RedisDBType.REDIS_SYS_DB, strKey, area.getId(), area.getId());
        } else {
            redisUtils.zRemRangeByScore(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, area.getType()), area.getId(), area.getId());
        }
        redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_DB, String.format(RedisConstant.SYS_AREA_TYPE, "all"));
        if (redisUtils.exists(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", area.getType(), area.getParent().getId(), area.getType() == 2 ? area.getName().substring(0, 2) : area.getName()))) {
            redisUtils.remove(RedisConstant.RedisDBType.REDIS_SYS_AREA, String.format("%d:%d:%s", area.getType(), area.getParent().getId(), area.getType() == 2 ? area.getName().substring(0, 2) : area.getName()));
        }
    }

    /**
     * 按用户id或者区域id查询区域列表
     *
     * @return
     */
    public List<Area> findListByUserIdOrAreaId(java.util.Map<String, Object> paramMap) {
        return dao.findListByUserIdOrAreaId(paramMap);
    }

    //region 网点覆盖区域报表

//    /**
//     * 获取安维覆盖的区域
//     *
//     * @return
//     */
//    public List<ServicePointCoverProvinceRptEntity> getServicePointCoverAreasRptData() {
//// mark on 2020-1-18 begin
////        List<Area> provinceAreaList = dao.getServicePointCoverAreasByAreaType(Area.TYPE_VALUE_PROVINCE);
////        List<Area> cityAreaList = dao.getServicePointCoverAreasByAreaType(Area.TYPE_VALUE_CITY);
////        List<Area> countyAreaList = dao.getServicePointCoverAreasByAreaType(Area.TYPE_VALUE_COUNTY);
//// mark on 2020-1-18 end
//        // add on 2019-12-14 begin
//        List<Long> allAreaIds = msServicePointAreaService.findListWithAreaIds();
//        List<Area> cacheProvinceAreaList = findListByType(Area.TYPE_VALUE_PROVINCE);
//        List<Area> cacheCityAreaList = findListByType(Area.TYPE_VALUE_CITY);
//        List<Area> cacheCountyAreaList = findListByType(Area.TYPE_VALUE_COUNTY);
//
////mark on 2020-1-18 begin
////        List<Area> filterProvinceAreaList = cacheProvinceAreaList.stream().filter(x->allAreaIds.contains(x.getId())).collect(Collectors.toList());
////        List<Area> filterCityAreaList = cacheCityAreaList.stream().filter(x->allAreaIds.contains(x.getId())).collect(Collectors.toList());
////        List<Area> filterCountyAreaList = cacheCountyAreaList.stream().filter(x->allAreaIds.contains(x.getId())).collect(Collectors.toList());
////mark on 2020-1-18 end
//
//        List<Area> provinceAreaList = cacheProvinceAreaList.stream().filter(x->allAreaIds.contains(x.getId())).collect(Collectors.toList());
//        List<Area> cityAreaList = cacheCityAreaList.stream().filter(x->allAreaIds.contains(x.getId())).collect(Collectors.toList());
//        List<Area> countyAreaList = cacheCountyAreaList.stream().filter(x->allAreaIds.contains(x.getId())).collect(Collectors.toList());
//
//        //mark on 2020-1-18 begin
////        getServicePointCoverAreasByAreaTypeCompare("getServicePointCoverAreasRptData.Province", provinceAreaList, filterProvinceAreaList);
////        getServicePointCoverAreasByAreaTypeCompare("getServicePointCoverAreasRptData.city", cityAreaList, filterCityAreaList);
////        getServicePointCoverAreasByAreaTypeCompare("getServicePointCoverAreasRptData.county", countyAreaList, filterCountyAreaList);
//        //mark on 2020-1-18 end
//        // add on 2019-12-14 end
//
//        /*
//        // mark on 2020-1-18 begin
//        Integer townCount = dao.getTownCount();   //mark on 2020-1-18
//        List<Area> townAreaList = Lists.newArrayList();
//        if(townCount !=null && townCount>0){
//            townAreaList = dao.getServicePointCoverTown(townCount);
//        }
//        // mark on 2020-1-18 end
//        */
//
//        // add on 2019-12-26 begin
//        List<Long> townAreaIds = msServicePointStationService.findCoverAreaList();
//        List<Area> townAreaList = Lists.newArrayList();
//        //List<Area> townAreaListFromMS = Lists.newArrayList();  //mark on 2020-1-18
//        if (!org.springframework.util.ObjectUtils.isEmpty(townAreaIds)) {
//            List<Area> cacheTownAreaList =  findListByType(Area.TYPE_VALUE_TOWN);
//            if (!org.springframework.util.ObjectUtils.isEmpty(cacheTownAreaList)) {
//                //townAreaListFromMS = cacheTownAreaList.stream().filter(x -> townAreaIds.contains(x.getId())).collect(Collectors.toList());  //mark on 2020-1-18
//                townAreaList = cacheTownAreaList.stream().filter(x -> townAreaIds.contains(x.getId())).collect(Collectors.toList());
//                //getServicePointCoverAreasByAreaTypeCompare("getTownArea.网点服务区域资料比对", townAreaList, townAreaListFromMS);//mark on 2020-1-18
//            }
//        }
//        // add on 2019-12-26 end
//
//        Map<Long, List<Area>> townMap = Maps.newHashMap();
//
//        for(Area area:townAreaList){
//            List<Area> temp = null;
//            if (townMap.containsKey(area.getParentId())) {
//                temp = townMap.get(area.getParentId());
//            } else {
//                temp = Lists.newArrayList();
//                townMap.put(area.getParentId(), temp);
//            }
//            temp.add(area);
//        }
//
//        /*for (Area area : countyAreaList) {
//            List<Area> temp = null;
//            if (countyMap.containsKey(area.getParentId())) {
//                temp = countyMap.get(area.getParentId());
//            } else {
//                temp = Lists.newArrayList();
//                countyMap.put(area.getParentId(), temp);
//            }
//            temp.add(area);
//        }*/
//        List<ServicePointCoverCountyRptEntity> countyRptEntityList = Lists.newArrayList();
//        ServicePointCoverCountyRptEntity countyRptEntity;
//        for(Area area:countyAreaList){
//            countyRptEntity = new ServicePointCoverCountyRptEntity();
//            countyRptEntity.setCountyId(area.getId());
//            countyRptEntity.setCountyName(area.getName());
//            countyRptEntity.setParentId(area.getParentId());
//            List<Area> temp = townMap.get(area.getId());
//            countyRptEntity.setCountyList(temp !=null ? temp : Collections.EMPTY_LIST);
//            countyRptEntityList.add(countyRptEntity);
//        }
//
//        Map<Long,List<ServicePointCoverCountyRptEntity>> countyMap = Maps.newHashMap();
//        for(ServicePointCoverCountyRptEntity county:countyRptEntityList){
//            List<ServicePointCoverCountyRptEntity> temp = null;
//            if(countyMap.containsKey(county.getParentId())){
//                temp = countyMap.get(county.getParentId());
//            }else{
//                temp = Lists.newArrayList();
//                countyMap.put(county.getParentId(),temp);
//            }
//            temp.add(county);
//        }
//
//
//        List<ServicePointCoverCityRptEntity> cityRptEntityList = Lists.newArrayList();
//        ServicePointCoverCityRptEntity cityRptEntity;
//        for (Area area : cityAreaList) {
//            cityRptEntity = new ServicePointCoverCityRptEntity();
//            cityRptEntity.setCityId(area.getId());
//            cityRptEntity.setCityName(area.getName());
//            cityRptEntity.setParentId(area.getParentId());
//            //List<Area> temp = countyMap.get(area.getId());
//            List<ServicePointCoverCountyRptEntity> temp = countyMap.get(area.getId());
//            cityRptEntity.setCountyList(temp != null ? temp : Collections.EMPTY_LIST);
//            cityRptEntityList.add(cityRptEntity);
//        }
//
//        Map<Long, List<ServicePointCoverCityRptEntity>> cityMap = Maps.newHashMap();
//        for (ServicePointCoverCityRptEntity city : cityRptEntityList) {
//            List<ServicePointCoverCityRptEntity> temp = null;
//            if (cityMap.containsKey(city.getParentId())) {
//                temp = cityMap.get(city.getParentId());
//            } else {
//                temp = Lists.newArrayList();
//                cityMap.put(city.getParentId(), temp);
//            }
//            temp.add(city);
//        }
//
//        List<ServicePointCoverProvinceRptEntity> provinceRptEntityList = Lists.newArrayList();
//        ServicePointCoverProvinceRptEntity provinceRptEntity;
//        for (Area area : provinceAreaList) {
//            provinceRptEntity = new ServicePointCoverProvinceRptEntity();
//            provinceRptEntity.setProvinceId(area.getId());
//            provinceRptEntity.setProvinceName(area.getName());
//            List<ServicePointCoverCityRptEntity> temp = cityMap.get(area.getId());
//            provinceRptEntity.setCityList(temp != null ? temp : Collections.EMPTY_LIST);
//            provinceRptEntityList.add(provinceRptEntity);
//        }
//
//        return provinceRptEntityList;
//    }

    /*
    // mark on 2020-1-18
    public void getServicePointCoverAreasByAreaTypeCompare(String methodName, List<Area> dbAreaList, List<Area> msAreaList) {
        try{
            String msg = "";
            if (org.springframework.util.ObjectUtils.isEmpty(msAreaList)) {
                if (!org.springframework.util.ObjectUtils.isEmpty(dbAreaList)) {
                    List<Long> dbIds  = dbAreaList.stream().map(Area::getId).collect(Collectors.toList());
                    msg = "db:" + dbIds.toString()+",ms: is null.";
                }
            } else {
                if (!org.springframework.util.ObjectUtils.isEmpty(msAreaList)) {
                    List<Long> dbIds = dbAreaList.stream().map(Area::getId).collect(Collectors.toList());
                    List<Long> msIds = msAreaList.stream().map(Area::getId).collect(Collectors.toList());
                    if (dbIds.size() != msIds.size()) {
                        msg = "微服务:"+dbIds.toString()+",DB:"+msIds.toString();
                    }
                } else {
                    List<Long> msIds  = msAreaList.stream().map(Area::getId).collect(Collectors.toList());
                    msg = "微服务:" + msIds.toString()+",DB为空";
                }
            }
            if (msg != "") {
                msg = "网点区域web与微服务数不一致，"+msg;
                LogUtils.saveLog("基础资料", "AreaService.getServicePointCoverAreasRptData"+","+methodName, msg, null, UserUtils.getUser());
            }
        } catch (Exception ex){
            ex.printStackTrace();
        }
    }*/
    //endregion 网点覆盖区域报表

    /**
     * 根据ParentIds和type获取所有下级的数据  add on 2019-10-21
     * @param area
     * @return
     */
    public List<Long> findIdByParentIdsAndType(Area area){
        return dao.findIdByParentIdsAndType(area);
    }

    /**
     * 通过区域id列表查找区域的详细信息(为安维人员获取区域信息) add on 2019-11-7
     * @param areaIds
     * @return
     */
    public List<Area> findEngineerAreas(List<Long> areaIds) {
        List<Area> areaList = Lists.newArrayList();
        if (areaIds != null && !areaIds.isEmpty()) {
            //return dao.findEngineerAreas(areaIds);  //findEngineerAreas只比dao.findServicePointAreas少输出一个字段type
            return findAreasForServicePointOrEngineer(areaIds);
        }
        return Lists.newArrayList();
    }

    public List<Area> findAreasForServicePointOrEngineer(List<Long> areaIds) {
        int  pageNo = 1;
        Page<Area> areaPage = new Page<>();
        areaPage.setPageSize(1000);
        areaPage.setPageNo(pageNo);
        List<Area> areaListFromDb = dao.findAreasForServicePointOrEngineer(areaIds,areaPage);

        while(pageNo < areaPage.getPageCount()) {
            pageNo++;
            areaPage.setPageNo(pageNo);
            areaListFromDb.addAll(dao.findAreasForServicePointOrEngineer(areaIds,areaPage));

        }
        return areaListFromDb;
    }

    public List<Area> findServicePointAreas(List<Long> areaIds) {
        List<Area> areaList = Lists.newArrayList();
        if (areaIds != null && !areaIds.isEmpty()) {
            if (areaIds.size() >200) {
                List<Area> finalAreaList = Lists.newArrayList();
                Lists.partition(areaIds, 200).forEach(ids->{
                    List<Area> areaListFromDb = findAreasForServicePointOrEngineer(ids);
                    if (areaListFromDb != null && !areaListFromDb.isEmpty()) {
                        finalAreaList.addAll(areaListFromDb);
                    }
                });
                if (finalAreaList != null && !finalAreaList.isEmpty()) {
                    areaList.addAll(finalAreaList);
                }
            } else {
                areaList = findAreasForServicePointOrEngineer(areaIds);
            }
        }
        return areaList;
    }
}
