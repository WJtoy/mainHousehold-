package com.wolfking.jeesite.ms.b2bcenter.sd.service;

import com.google.common.base.Splitter;
import com.kkl.kklplus.common.exception.MSErrorCode;
import com.kkl.kklplus.common.response.MSResponse;
import com.kkl.kklplus.entity.b2bcenter.md.B2BDataSourceEnum;
import com.kkl.kklplus.entity.b2bcenter.pb.MQB2BOrderReminderMessage;
import com.kkl.kklplus.entity.cc.Reminder;
import com.kkl.kklplus.entity.cc.ReminderStatus;
import com.kkl.kklplus.entity.cc.ReminderType;
import com.wolfking.jeesite.common.exception.OrderReminderException;
import com.wolfking.jeesite.common.utils.GsonUtils;
import com.wolfking.jeesite.common.utils.PushMessageUtils;
import com.kkl.kklplus.utils.StringUtils;
import com.wolfking.jeesite.modules.sd.entity.*;
import com.wolfking.jeesite.modules.sd.service.OrderService;
import com.wolfking.jeesite.modules.sd.utils.OrderCacheUtils;
import com.wolfking.jeesite.modules.sd.utils.OrderUtils;
import com.wolfking.jeesite.modules.sys.entity.Area;
import com.wolfking.jeesite.modules.sys.entity.User;
import com.wolfking.jeesite.modules.sys.service.AreaService;
import com.wolfking.jeesite.modules.sys.utils.LogUtils;
import com.wolfking.jeesite.modules.sys.utils.SeqUtils;
import com.wolfking.jeesite.ms.b2bcenter.sd.entity.B2BOrderVModel;
import com.wolfking.jeesite.ms.b2bcenter.sd.utils.B2BOrderUtils;
import com.wolfking.jeesite.ms.cc.service.ReminderService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Slf4j
@Transactional(propagation = Propagation.NOT_SUPPORTED)
@Service
public class B2BOrderReminderService {

    @Autowired
    private OrderService orderService;
    @Autowired
    private AreaService areaService;
    @Autowired
    ReminderService reminderService;

    public MSResponse processReminderB2BOrderMessage(MQB2BOrderReminderMessage.B2BOrderReminderMessage message) {
        MSResponse response = new MSResponse<>(MSErrorCode.SUCCESS);
        if (B2BDataSourceEnum.isB2BDataSource(message.getDataSource()) && B2BOrderUtils.canReminderOrder(message.getDataSource())
                && message.getKklOrderId() > 0) {
            try {
                if (message.getDataSource() == B2BDataSourceEnum.XYINGYAN.id) {
                    reminderOrder(message.getKklOrderId(), message.getB2BReminderId(), message.getB2BReminderNo(), message.getContent(), B2BOrderVModel.b2bUser);
                }
            } catch (OrderReminderException e) {
                String logJson = GsonUtils.toGsonString(message);
                LogUtils.saveLog("B2B催单【OrderReminderException】", "B2BOrderReminderService.processReminderB2BOrderMessage", logJson, e, null);
                if (e.getErrorCode() == OrderReminderException.ERROR_CODE_GENERATE_REMINDER_NO_FAILURE) {
                    response.setCode(MSErrorCode.FAILURE.getCode());
                }
            } catch (Exception e2) {
                String logJson = GsonUtils.toGsonString(message);
                LogUtils.saveLog("B2B催单【Exception】", "B2BOrderReminderService.processReminderB2BOrderMessage", logJson, e2, null);
            }
        }
        return response;
    }

    @Transactional()
    public void reminderOrder(Long orderId, Long b2bReminderId, String b2bReminderNo, String remarks, User user) {
        Order order = orderService.getOrderById(orderId, null, OrderUtils.OrderDataLevel.STATUS, true);
        if (order == null || order.getOrderCondition() == null) {
            throw new OrderReminderException(OrderReminderException.ERROR_CODE_ORDER_NOT_FOUND, "读取工单信息失败");
        }
        OrderCondition orderCondition = order.getOrderCondition();
        int status = orderCondition.getStatusValue();
        if (status == 0 || status > 50) {
            throw new OrderReminderException(OrderReminderException.ERROR_CODE_ORDER_STATUS_ERROR, "当前订单状态:" + orderCondition.getStatus().getLabel() + ",不能催单");
        }
        Integer reminderFlag = order.getOrderStatus().getReminderStatus();
        if (reminderFlag == null) {
            reminderFlag = 0;
        }
        if (reminderFlag > ReminderStatus.All.getCode() && reminderFlag < ReminderStatus.Completed.getCode()) {
            ReminderStatus reminderStatus = ReminderStatus.fromCode(reminderFlag);
            throw new OrderReminderException(OrderReminderException.ERROR_CODE_DO_NOT_REMINDER, "当前订单已催单，状态为:" + reminderStatus != null ? reminderStatus.getMsg() : "" + ",不能催单");
        }
        String reminderNo = SeqUtils.NextSequenceNo("ReminderNo", 0, 3);
        if (StringUtils.isBlank(reminderNo)) {
            throw new OrderReminderException(OrderReminderException.ERROR_CODE_GENERATE_REMINDER_NO_FAILURE, "生成单据编号失败，请重新提交");
        }
        long servicePointId = orderCondition.getServicePoint() == null || orderCondition.getServicePoint().getId() == null || orderCondition.getServicePoint().getId() <= 0 ? 0 : orderCondition.getServicePoint().getId();
        Reminder.ReminderBuilder builder = Reminder.builder()
                .reminderNo(reminderNo)
                .b2bReminderId(b2bReminderId != null ? b2bReminderId : 0)
                .b2bReminderNo(StringUtils.toString(b2bReminderNo))
                .reminderType(ReminderType.B2B.getCode())
                .dataSource(order.getDataSourceId())
                .orderId(order.getId())
                .quarter(order.getQuarter())
                .orderCreateAt(orderCondition.getCreateDate().getTime())
                .customerId(orderCondition.getCustomer().getId())
                .servicepointId(servicePointId)
                .productCategoryId(orderCondition.getProductCategoryId() == null ? 0L : orderCondition.getProductCategoryId()) //2019-10-08
                .userName(orderCondition.getUserName())
                .userPhone(orderCondition.getServicePhone())
                .userAddress(orderCondition.getArea().getName() + order.getOrderCondition().getServiceAddress())
                .orderNo(order.getOrderNo())
                .cityId(0L)
                .provinceId(0L)
                .areaId(orderCondition.getArea().getId())
                .subAreaId(orderCondition.getSubArea().getId())
                .status(ReminderStatus.WaitReply.getCode())
                .reminderRemark(StringUtils.toString(remarks))
                .canRush(orderCondition.getCanRush());
        Area area = areaService.getFromCache(orderCondition.getArea().getId());
        if (area != null) {
            List<String> ids = Splitter.onPattern(",")
                    .omitEmptyStrings()
                    .trimResults()
                    .splitToList(area.getParentIds());
            if (ids.size() >= 2) {
                builder.cityId(Long.valueOf(ids.get(ids.size() - 1)))
                        .provinceId(Long.valueOf(ids.get(ids.size() - 2)));
            }
        }
        Reminder reminderForm = builder.build();
        reminderForm.setCreateById(user.getId());
        reminderForm.setOperatorType(reminderService.getReminderCreatorType(user).getCode());
        reminderForm.setCreateBy(user.getName());//user name
        reminderForm.setCreateDt(System.currentTimeMillis());
        reminderService.newReminder(reminderForm);
        //淘汰订单orderStatus缓存
        OrderCacheParam.Builder cacheBuilder = new OrderCacheParam.Builder();
        cacheBuilder.setOpType(OrderCacheOpType.UPDATE)
                .setOrderId(order.getId())
                .setDeleteField(OrderCacheField.ORDER_STATUS);
        OrderCacheUtils.update(cacheBuilder.build());
        PushMessageUtils.pushReminderMessage(orderCondition.getServicePoint(), orderCondition.getEngineer(), order.getOrderNo());
    }


}
